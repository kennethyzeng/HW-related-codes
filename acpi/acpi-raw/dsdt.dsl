/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20180629 (64-bit version)
 * Copyright (c) 2000 - 2018 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of dsdt.dat, Fri Oct 18 17:46:40 2024
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x00036F94 (225172)
 *     Revision         0x02
 *     Checksum         0x68
 *     OEM ID           "SUPERM"
 *     OEM Table ID     "SMCI--MB"
 *     OEM Revision     0x01072009 (17244169)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20091013 (537464851)
 */
DefinitionBlock ("", "DSDT", 2, "SUPERM", "SMCI--MB", 0x01072009)
{
    External (_SB_.EDGH, MethodObj)    // 0 Arguments
    External (_SB_.EDNT, FieldUnitObj)
    External (_SB_.EDOS, MethodObj)    // 3 Arguments
    External (_SB_.EDTM, MethodObj)    // 4 Arguments
    External (_SB_.EDVD, FieldUnitObj)
    External (_SB_.NVDR.NTDO, MethodObj)    // 1 Arguments
    External (_SB_.NVDR.NTPR, MethodObj)    // 0 Arguments
    External (_SB_.OSNC, MethodObj)    // 4 Arguments
    External (_SB_.OSPC, MethodObj)    // 4 Arguments
    External (_SB_.PC00.DBGM, FieldUnitObj)
    External (_SB_.PC00.HEC2.HPTS, MethodObj)    // 0 Arguments
    External (_SB_.PC00.HEC2.HWAK, MethodObj)    // 0 Arguments
    External (_SB_.PC00.PTHT.THEN, MethodObj)    // 0 Arguments
    External (_SB_.PC00.SAT0.SDSM, MethodObj)    // 4 Arguments
    External (_SB_.PC00.XHCI.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PC00.XHCI.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PC01.BR1A.DBGM, FieldUnitObj)
    External (_SB_.PC01.BR1B.DBGM, FieldUnitObj)
    External (_SB_.PC01.BR1C.DBGM, FieldUnitObj)
    External (_SB_.PC01.BR1D.DBGM, FieldUnitObj)
    External (_SB_.PC01.DBGM, FieldUnitObj)
    External (_SB_.PC02.BR2A.DBGM, FieldUnitObj)
    External (_SB_.PC02.BR2B.DBGM, FieldUnitObj)
    External (_SB_.PC02.BR2C.DBGM, FieldUnitObj)
    External (_SB_.PC02.BR2D.DBGM, FieldUnitObj)
    External (_SB_.PC02.DBGM, FieldUnitObj)
    External (_SB_.PC03.BR3A.DBGM, FieldUnitObj)
    External (_SB_.PC03.BR3B.DBGM, FieldUnitObj)
    External (_SB_.PC03.BR3C.DBGM, FieldUnitObj)
    External (_SB_.PC03.BR3D.DBGM, FieldUnitObj)
    External (_SB_.PC03.DBGM, FieldUnitObj)
    External (_SB_.PC04.BR4A.DBGM, FieldUnitObj)
    External (_SB_.PC04.BR4B.DBGM, FieldUnitObj)
    External (_SB_.PC04.BR4C.DBGM, FieldUnitObj)
    External (_SB_.PC04.BR4D.DBGM, FieldUnitObj)
    External (_SB_.PC04.DBGM, FieldUnitObj)
    External (_SB_.PC05.BR5A.DBGM, FieldUnitObj)
    External (_SB_.PC05.BR5B.DBGM, FieldUnitObj)
    External (_SB_.PC05.BR5C.DBGM, FieldUnitObj)
    External (_SB_.PC05.BR5D.DBGM, FieldUnitObj)
    External (_SB_.PC05.DBGM, FieldUnitObj)
    External (_SB_.PC06.DBGM, FieldUnitObj)
    External (_SB_.PC07.DBGM, FieldUnitObj)
    External (_SB_.PC07.QR1A.DBGM, FieldUnitObj)
    External (_SB_.PC07.QR1B.DBGM, FieldUnitObj)
    External (_SB_.PC07.QR1C.DBGM, FieldUnitObj)
    External (_SB_.PC07.QR1D.DBGM, FieldUnitObj)
    External (_SB_.PC08.DBGM, FieldUnitObj)
    External (_SB_.PC08.QR2A.DBGM, FieldUnitObj)
    External (_SB_.PC08.QR2B.DBGM, FieldUnitObj)
    External (_SB_.PC08.QR2C.DBGM, FieldUnitObj)
    External (_SB_.PC08.QR2D.DBGM, FieldUnitObj)
    External (_SB_.PC09.DBGM, FieldUnitObj)
    External (_SB_.PC09.QR3A.DBGM, FieldUnitObj)
    External (_SB_.PC09.QR3B.DBGM, FieldUnitObj)
    External (_SB_.PC09.QR3C.DBGM, FieldUnitObj)
    External (_SB_.PC09.QR3D.DBGM, FieldUnitObj)
    External (_SB_.PC10.DBGM, FieldUnitObj)
    External (_SB_.PC10.QR4A.DBGM, FieldUnitObj)
    External (_SB_.PC10.QR4B.DBGM, FieldUnitObj)
    External (_SB_.PC10.QR4C.DBGM, FieldUnitObj)
    External (_SB_.PC10.QR4D.DBGM, FieldUnitObj)
    External (_SB_.PC11.DBGM, FieldUnitObj)
    External (_SB_.PC11.QR5A.DBGM, FieldUnitObj)
    External (_SB_.PC11.QR5B.DBGM, FieldUnitObj)
    External (_SB_.PC11.QR5C.DBGM, FieldUnitObj)
    External (_SB_.PC11.QR5D.DBGM, FieldUnitObj)
    External (_SB_.PTHH.THEN, MethodObj)    // 0 Arguments
    External (_SB_.UC06.DBGM, FieldUnitObj)
    External (_SB_.UC07.DBGM, FieldUnitObj)
    External (_SB_.UC16.DBGM, FieldUnitObj)
    External (_SB_.UC17.DBGM, FieldUnitObj)
    External (_SB_.WERR, DeviceObj)
    External (CRBI, UnknownObj)
    External (EDNT, IntObj)
    External (PTHM, IntObj)

    Name (ENTK, 0xA5)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x0A00)
    Name (IO1L, 0x20)
    Name (IO2B, 0x0A20)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A30)
    Name (IO3L, 0x10)
    Name (IO4B, 0x0A40)
    Name (IO4L, 0x10)
    Name (IO5B, 0x0600)
    Name (IO5L, 0x10)
    Name (SP1O, 0x4E)
    Name (IOES, 0x00)
    Name (IPBT, 0xE4)
    Name (IBUF, 0xE5)
    Name (BTIM, 0xE6)
    Name (IDTP, 0x0CA2)
    Name (ICDP, 0x0CA3)
    Name (SADR, 0x10)
    Name (SRVV, 0x0200)
    Name (BSMI, 0xC0)
    Name (ASSB, 0x00)
    Name (AOTB, 0x00)
    Name (AAXB, 0x00)
    Name (PEHP, 0x01)
    Name (PEPM, 0x01)
    Name (PECS, 0x01)
    Name (ITKE, 0x00)
    Name (MBEC, 0xFFFF)
    Name (PELN, 0x10000000)
    Name (CSMI, 0x61)
    Name (DSSP, 0x00)
    Name (FHPP, 0x01)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, 0x00)
    Name (TMF1, 0x00)
    Name (TMF2, 0x00)
    Name (TMF3, 0x00)
    Name (TTPF, 0x01)
    Name (DTPT, 0x00)
    Name (TTDP, 0x00)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPBS, 0x1000)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPCS, 0x1000)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0x6AF0CF18)
    Name (PPIL, 0x1C)
    Name (AMDT, 0x00)
    Name (TPMF, 0x00)
    Name (PPIV, 0x00)
    Name (PMBA, 0x0500)
    Name (PMLN, 0x80)
    Name (SMIP, 0xB2)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x00100000)
    Name (PM30, 0x0530)
    Name (SMBS, 0x0780)
    Name (SMBL, 0x20)
    Name (PEBS, 0x80000000)
    Name (SHPC, 0x00)
    Name (PEER, 0x00)
    Name (PICM, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == 0x00))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = 0x00
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = 0x01
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + 0x01)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [0x00] = Arg0
        Local0 = (SS1 << 0x01)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((0x01 << Arg1) & Local0))
        {
            PRWP [0x01] = Arg1
        }
        Else
        {
            Local0 >>= 0x01
            If (((OSFL () == 0x01) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [0x01])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [0x01])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [0x00]))
        {
            WAKP [0x01] = 0x00
        }
        Else
        {
            WAKP [0x01] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, 0x01)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, 0x00)
    Name (SS2, 0x00)
    Name (SS3, 0x00)
    Name (SS4, 0x01)
    Name (IOST, 0x0003)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, 0x01)
    Name (OSHF, 0x00)
    Name (HWPS, 0x00)
    Scope (_SB)
    {
        Name (XCNT, 0x00)
        Name (OSYS, 0x00)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (CondRefOf (_OSI))
            {
                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x0D
                }

                If (_OSI ("Windows 2013"))
                {
                    OSYS = 0x0E
                }

                If (_OSI ("Windows 2015"))
                {
                    OSYS = 0x0F
                }

                If (_OSI ("FreeBSD"))
                {
                    OSYS = 0x02
                }

                If (_OSI ("HP-UX"))
                {
                    OSYS = 0x03
                }

                If (_OSI ("OpenVMS"))
                {
                    OSYS = 0x04
                }

                If ((OSYS >= 0x0D))
                {
                    If ((XCNT == 0x00))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0x84
                        }

                        XCNT++
                    }
                }
                ElseIf ((DBGM == 0x01))
                {
                    IO80 = OSYS /* \_SB_.OSYS */
                }
            }
        }
    }

    OperationRegion (DBG0, SystemIO, 0x80, 0x02)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8, 
        IO81,   8
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    OperationRegion (PSYS, SystemMemory, 0x6ABA2000, 0x0800)
    Field (PSYS, ByteAcc, NoLock, Preserve)
    {
        PLAT,   32, 
        APCE,   1, 
        AP00,   1, 
        AP01,   1, 
        AP02,   1, 
        AP03,   1, 
        AP04,   1, 
        AP05,   1, 
        AP06,   1, 
        AP07,   1, 
        AP08,   1, 
        AP09,   1, 
        AP10,   1, 
        AP11,   1, 
        AP12,   1, 
        AP13,   1, 
        AP14,   1, 
        AP15,   1, 
        AP16,   1, 
        AP17,   1, 
        AP18,   1, 
        AP19,   1, 
        AP20,   1, 
        AP21,   1, 
        AP22,   1, 
        AP23,   1, 
        AP24,   1, 
        AP25,   1, 
        AP26,   1, 
        AP27,   1, 
        AP28,   1, 
        AP29,   1, 
        AP30,   1, 
        AP31,   1, 
        AP32,   1, 
        AP33,   1, 
        AP34,   1, 
        AP35,   1, 
        AP36,   1, 
        AP37,   1, 
        AP38,   1, 
        AP39,   1, 
        AP40,   1, 
        AP41,   1, 
        AP42,   1, 
        AP43,   1, 
        AP44,   1, 
        AP45,   1, 
        AP46,   1, 
        AP47,   1, 
        RESA,   15, 
        SKOV,   1, 
        P119,   1, 
        CPX4,   1, 
        RES0,   5, 
        TPME,   1, 
        CSEN,   1, 
        C3EN,   1, 
        C6EN,   1, 
        C7EN,   1, 
        MWOS,   1, 
        PSEN,   1, 
        EMCA,   1, 
        HWAL,   2, 
        KPRS,   1, 
        MPRS,   1, 
        TSEN,   1, 
        FGTS,   1, 
        OSCX,   1, 
        RESX,   1, 
        CPHP,   8, 
        IIOP,   8, 
        SPB0,   16, 
        SPB1,   16, 
        SPB2,   16, 
        SPB3,   16, 
        SPB4,   16, 
        SPB5,   16, 
        SPB6,   16, 
        SPB7,   16, 
        PRBM,   32, 
        CTHC,   8, 
        P0ID,   32, 
        P1ID,   32, 
        P2ID,   32, 
        P3ID,   32, 
        P4ID,   32, 
        P5ID,   32, 
        P6ID,   32, 
        P7ID,   32, 
        P0BM,   64, 
        P1BM,   64, 
        P2BM,   64, 
        P3BM,   64, 
        P4BM,   64, 
        P5BM,   64, 
        P6BM,   64, 
        P7BM,   64, 
        P0BH,   64, 
        P1BH,   64, 
        P2BH,   64, 
        P3BH,   64, 
        P4BH,   64, 
        P5BH,   64, 
        P6BH,   64, 
        P7BH,   64, 
        CFMM,   32, 
        TSSZ,   32, 
        SMI0,   32, 
        SMI1,   32, 
        SMI2,   32, 
        SMI3,   32, 
        SCI0,   32, 
        SCI1,   32, 
        SCI2,   32, 
        SCI3,   32, 
        MADD,   64, 
        CUU0,   128, 
        CUU1,   128, 
        CUU2,   128, 
        CUU3,   128, 
        CUU4,   128, 
        CUU5,   128, 
        CUU6,   128, 
        CUU7,   128, 
        CPSP,   8, 
        ME00,   128, 
        ME01,   128, 
        ME10,   128, 
        ME11,   128, 
        ME20,   128, 
        ME21,   128, 
        ME30,   128, 
        ME31,   128, 
        ME40,   128, 
        ME41,   128, 
        ME50,   128, 
        ME51,   128, 
        ME60,   128, 
        ME61,   128, 
        ME70,   128, 
        ME71,   128, 
        LDIR,   64, 
        PRID,   32, 
        AHPE,   8, 
        WHEN,   8, 
        WSCI,   8, 
        SERR,   8, 
        PERR,   8, 
        DHRD,   192, 
        ATSR,   192, 
        RHSA,   192, 
        WSIC,   8, 
        WSIS,   16, 
        WSIB,   8, 
        WSID,   8, 
        WSIF,   8, 
        WSTS,   8, 
        WHEA,   8, 
        BGMA,   64, 
        BGMS,   8, 
        BGIO,   16, 
        BGIL,   8, 
        CNBS,   8, 
        XHMD,   8, 
        SBV1,   8, 
        SBV2,   8, 
        HWEN,   2, 
        RES2,   1, 
        HWPI,   1, 
        RES1,   4, 
        EPCS,   8, 
        ELN0,   64, 
        ELN1,   64, 
        ELN2,   64, 
        ELN3,   64, 
        ELN4,   64, 
        ELN5,   64, 
        ELN6,   64, 
        ELN7,   64, 
        EBA0,   64, 
        EBA1,   64, 
        EBA2,   64, 
        EBA3,   64, 
        EBA4,   64, 
        EBA5,   64, 
        EBA6,   64, 
        EBA7,   64, 
        BB00,   8, 
        BB01,   8, 
        BB02,   8, 
        BB03,   8, 
        BB04,   8, 
        BB05,   8, 
        BB06,   8, 
        BB07,   8, 
        BB08,   8, 
        BB09,   8, 
        BB0A,   8, 
        BB0B,   8, 
        BB0C,   8, 
        BB0D,   8, 
        BB10,   8, 
        BB11,   8, 
        BB12,   8, 
        BB13,   8, 
        BB14,   8, 
        BB15,   8, 
        BB16,   8, 
        BB17,   8, 
        BB18,   8, 
        BB19,   8, 
        BB1A,   8, 
        BB1B,   8, 
        BB1C,   8, 
        BB1D,   8, 
        BB20,   8, 
        BB21,   8, 
        BB22,   8, 
        BB23,   8, 
        BB24,   8, 
        BB25,   8, 
        BB26,   8, 
        BB27,   8, 
        BB28,   8, 
        BB29,   8, 
        BB2A,   8, 
        BB2B,   8, 
        BB2C,   8, 
        BB2D,   8, 
        BB30,   8, 
        BB31,   8, 
        BB32,   8, 
        BB33,   8, 
        BB34,   8, 
        BB35,   8, 
        BB36,   8, 
        BB37,   8, 
        BB38,   8, 
        BB39,   8, 
        BB3A,   8, 
        BB3B,   8, 
        BB3C,   8, 
        BB3D,   8, 
        BB40,   8, 
        BB41,   8, 
        BB42,   8, 
        BB43,   8, 
        BB44,   8, 
        BB45,   8, 
        BB46,   8, 
        BB47,   8, 
        BB48,   8, 
        BB49,   8, 
        BB4A,   8, 
        BB4B,   8, 
        BB4C,   8, 
        BB4D,   8, 
        BB50,   8, 
        BB51,   8, 
        BB52,   8, 
        BB53,   8, 
        BB54,   8, 
        BB55,   8, 
        BB56,   8, 
        BB57,   8, 
        BB58,   8, 
        BB59,   8, 
        BB5A,   8, 
        BB5B,   8, 
        BB5C,   8, 
        BB5D,   8, 
        BB60,   8, 
        BB61,   8, 
        BB62,   8, 
        BB63,   8, 
        BB64,   8, 
        BB65,   8, 
        BB66,   8, 
        BB67,   8, 
        BB68,   8, 
        BB69,   8, 
        BB6A,   8, 
        BB6B,   8, 
        BB6C,   8, 
        BB6D,   8, 
        BB70,   8, 
        BB71,   8, 
        BB72,   8, 
        BB73,   8, 
        BB74,   8, 
        BB75,   8, 
        BB76,   8, 
        BB77,   8, 
        BB78,   8, 
        BB79,   8, 
        BB7A,   8, 
        BB7B,   8, 
        BB7C,   8, 
        BB7D,   8, 
        SGEN,   8, 
        SG00,   8, 
        SG01,   8, 
        SG02,   8, 
        SG03,   8, 
        SG04,   8, 
        SG05,   8, 
        SG06,   8, 
        SG07,   8, 
        CLOD,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMBA,   32, 
        DDRF,   8, 
        RT3S,   8, 
        RTP0,   8, 
        RTP3,   8, 
        FBB0,   8, 
        FBB1,   8, 
        FBB2,   8, 
        FBB3,   8, 
        FBB4,   8, 
        FBB5,   8, 
        FBB6,   8, 
        FBB7,   8, 
        FBL0,   8, 
        FBL1,   8, 
        FBL2,   8, 
        FBL3,   8, 
        FBL4,   8, 
        FBL5,   8, 
        FBL6,   8, 
        FBL7,   8, 
        P0FB,   8, 
        P1FB,   8, 
        P2FB,   8, 
        P3FB,   8, 
        P4FB,   8, 
        P5FB,   8, 
        P6FB,   8, 
        P7FB,   8, 
        FMB0,   32, 
        FMB1,   32, 
        FMB2,   32, 
        FMB3,   32, 
        FMB4,   32, 
        FMB5,   32, 
        FMB6,   32, 
        FMB7,   32, 
        FML0,   32, 
        FML1,   32, 
        FML2,   32, 
        FML3,   32, 
        FML4,   32, 
        FML5,   32, 
        FML6,   32, 
        FML7,   32, 
        FKPB,   32, 
        FKB0,   8, 
        FKB1,   8, 
        FKB2,   8, 
        FKB3,   8, 
        FKB4,   8, 
        FKB5,   8, 
        FKB6,   8, 
        FKB7,   8, 
        DBGM,   8, 
        IRPC,   8, 
        ATSC,   8
    }

    OperationRegion (GPCT, SystemIO, (PMBA + 0x42), 0x01)
    Field (GPCT, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        SGPC,   1
    }

    OperationRegion (GPE0, SystemIO, (PMBA + 0x9C), 0x04)
    Field (GPE0, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPEH,   1, 
            ,   7, 
        PCIE,   1, 
            ,   1, 
        PMEE,   1, 
            ,   1, 
        PMB0,   1, 
        Offset (0x04)
    }

    OperationRegion (GPES, SystemIO, (PMBA + 0x8C), 0x04)
    Field (GPES, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPSH,   1, 
        SGPS,   1, 
            ,   6, 
        PEES,   1, 
            ,   1, 
        PMES,   1, 
            ,   1, 
        PMEB,   1, 
        Offset (0x04)
    }

    Method (IPTS, 1, NotSerialized)
    {
        IO80 = 0x72
        PMES = 0x01
        PMEB = 0x01
        GPEH = 0x01
        PCIE = 0x01
        PMEE = 0x01
        PMB0 = 0x01
        If (CondRefOf (\_SB.PC00.HEC2.HPTS))
        {
            \_SB.PC00.HEC2.HPTS ()
        }

        \_SB.PC00.XHCI.XHCS ()
    }

    Method (IWAK, 1, Serialized)
    {
        IO80 = 0x73
        If (CondRefOf (\_SB.PC00.HEC2.HWAK))
        {
            \_SB.PC00.HEC2.HWAK ()
        }

        If ((Arg0 == 0x03)){}
        Return (Package (0x02)
        {
            0x00, 
            0x00
        })
    }

    Scope (_SB)
    {
        Scope (\_SB)
        {
            Method (PSTA, 1, NotSerialized)
            {
                Local6 = (PRBM >> Arg0)
                Local6 &= 0x01
                If ((Local6 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (APT0, Buffer (0x80)
            {
                /* 0000 */  0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E,  // ........
                /* 0008 */  0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E,  // ........
                /* 0010 */  0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E,  //  "$&(*,.
                /* 0018 */  0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,  // ........
                /* 0020 */  0x11, 0x13, 0x15, 0x17, 0x19, 0x1B, 0x1D, 0x1F,  // ........
                /* 0028 */  0x21, 0x23, 0x25, 0x27, 0x29, 0x2B, 0x2D, 0x2F,  // !#%')+-/
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0050 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0058 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0060 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0068 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0070 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0078 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Name (APT1, Buffer (0x80)
            {
                /* 0000 */  0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E,  // ........
                /* 0008 */  0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E,  // ........
                /* 0010 */  0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E,  //  "$&(*,.
                /* 0018 */  0x01, 0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F,  // ........
                /* 0020 */  0x11, 0x13, 0x15, 0x17, 0x19, 0x1B, 0x1D, 0x1F,  // ........
                /* 0028 */  0x21, 0x23, 0x25, 0x27, 0x29, 0x2B, 0x2D, 0x2F,  // !#%')+-/
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0050 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0058 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0060 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0068 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0070 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0078 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Name (APT2, Buffer (0x80)
            {
                /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0050 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0058 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0060 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0068 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0070 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0078 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Name (APT3, Buffer (0x80)
            {
                /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0050 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0058 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0060 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0068 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0070 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0078 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Name (APT4, Buffer (0x80)
            {
                /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0050 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0058 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0060 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0068 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0070 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0078 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Name (APT5, Buffer (0x80)
            {
                /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0050 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0058 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0060 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0068 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0070 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0078 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Name (APT6, Buffer (0x80)
            {
                /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0050 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0058 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0060 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0068 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0070 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0078 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Name (APT7, Buffer (0x80)
            {
                /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0050 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0058 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0060 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0068 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0070 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0078 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Method (TPID, 2, NotSerialized)
            {
                Local0 = 0x00
                If ((Arg0 == 0x00))
                {
                    Local0 = P0ID /* \P0ID */
                    Local0 += DerefOf (APT0 [Arg1])
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = P1ID /* \P1ID */
                    Local0 += DerefOf (APT1 [Arg1])
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = P2ID /* \P2ID */
                    Local0 += DerefOf (APT2 [Arg1])
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = P3ID /* \P3ID */
                    Local0 += DerefOf (APT3 [Arg1])
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = P4ID /* \P4ID */
                    Local0 += DerefOf (APT4 [Arg1])
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = P5ID /* \P5ID */
                    Local0 += DerefOf (APT5 [Arg1])
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = P6ID /* \P6ID */
                    Local0 += DerefOf (APT6 [Arg1])
                }

                If ((Arg0 == 0x07))
                {
                    Local0 = P7ID /* \P7ID */
                    Local0 += DerefOf (APT7 [Arg1])
                }

                Return (Local0)
            }

            Method (CSTA, 2, NotSerialized)
            {
                Local0 = 0x00
                Local2 = 0x00
                If ((Arg0 == 0x00))
                {
                    If ((P0BM == 0x00))
                    {
                        Return (0x00)
                    }

                    Local2 += DerefOf (APT0 [Arg1])
                    If ((Local2 == 0xFF))
                    {
                        Return (0x00)
                    }

                    Local2 >>= 0x01
                    Local0 = (P0BM >> Local2)
                }

                If ((Arg0 == 0x01))
                {
                    If ((P1BM == 0x00))
                    {
                        Return (0x00)
                    }

                    Local2 += DerefOf (APT1 [Arg1])
                    If ((Local2 == 0xFF))
                    {
                        Return (0x00)
                    }

                    Local2 >>= 0x01
                    Local0 = (P1BM >> Local2)
                }

                If ((Arg0 == 0x02))
                {
                    If ((P2BM == 0x00))
                    {
                        Return (0x00)
                    }

                    Local2 += DerefOf (APT2 [Arg1])
                    If ((Local2 == 0xFF))
                    {
                        Return (0x00)
                    }

                    Local2 >>= 0x01
                    Local0 = (P2BM >> Local2)
                }

                If ((Arg0 == 0x03))
                {
                    If ((P3BM == 0x00))
                    {
                        Return (0x00)
                    }

                    Local2 += DerefOf (APT3 [Arg1])
                    If ((Local2 == 0xFF))
                    {
                        Return (0x00)
                    }

                    Local2 >>= 0x01
                    Local0 = (P3BM >> Local2)
                }

                If ((Arg0 == 0x04))
                {
                    If ((P4BM == 0x00))
                    {
                        Return (0x00)
                    }

                    Local2 += DerefOf (APT4 [Arg1])
                    If ((Local2 == 0xFF))
                    {
                        Return (0x00)
                    }

                    Local2 >>= 0x01
                    Local0 = (P4BM >> Local2)
                }

                If ((Arg0 == 0x05))
                {
                    If ((P5BM == 0x00))
                    {
                        Return (0x00)
                    }

                    Local2 += DerefOf (APT5 [Arg1])
                    If ((Local2 == 0xFF))
                    {
                        Return (0x00)
                    }

                    Local2 >>= 0x01
                    Local0 = (P5BM >> Local2)
                }

                If ((Arg0 == 0x06))
                {
                    If ((P6BM == 0x00))
                    {
                        Return (0x00)
                    }

                    Local2 += DerefOf (APT6 [Arg1])
                    If ((Local2 == 0xFF))
                    {
                        Return (0x00)
                    }

                    Local2 >>= 0x01
                    Local0 = (P6BM >> Local2)
                }

                If ((Arg0 == 0x07))
                {
                    If ((P7BM == 0x00))
                    {
                        Return (0x00)
                    }

                    Local2 += DerefOf (APT7 [Arg1])
                    If ((Local2 == 0xFF))
                    {
                        Return (0x00)
                    }

                    Local2 >>= 0x01
                    Local0 = (P7BM >> Local2)
                }

                Local0 &= 0x01
                If ((Local0 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }

            Method (LAPC, 2, Serialized)
            {
                Name (APIC, Buffer (0x08){})
                CreateByteField (APIC, 0x00, TYPE)
                CreateByteField (APIC, 0x01, LLEN)
                CreateByteField (APIC, 0x02, PUID)
                CreateByteField (APIC, 0x03, APID)
                CreateDWordField (APIC, 0x04, FLAG)
                TYPE = 0x00
                LLEN = 0x08
                APID = TPID (Arg0, Arg1)
                If ((CSTA (Arg0, Arg1) == 0x00))
                {
                    FLAG = 0x00
                    PUID = 0xFF
                    APID = 0xFF
                }
                Else
                {
                    Local1 = (0x01 << CNBS)
                    Local1 *= Arg0
                    Local1 += Arg1
                    PUID = Local1
                    FLAG = 0x01
                }

                Return (APIC) /* \_SB_.LAPC.APIC */
            }

            Method (X2AP, 2, Serialized)
            {
                Name (APIC, Buffer (0x10){})
                CreateByteField (APIC, 0x00, TYPE)
                CreateByteField (APIC, 0x01, LLEN)
                CreateWordField (APIC, 0x02, RSVD)
                CreateDWordField (APIC, 0x04, APID)
                CreateDWordField (APIC, 0x08, FLAG)
                CreateDWordField (APIC, 0x0C, PUID)
                TYPE = 0x09
                LLEN = 0x10
                RSVD = 0x00
                APID = TPID (Arg0, Arg1)
                If ((CSTA (Arg0, Arg1) == 0x00))
                {
                    FLAG = 0x00
                    APID = 0xFFFFFFFF
                }
                Else
                {
                    Local1 = (0x01 << CNBS)
                    Local1 *= Arg0
                    Local1 += Arg1
                    PUID = Local1
                    FLAG = 0x01
                }

                Return (APIC) /* \_SB_.X2AP.APIC */
            }

            Device (SCK0)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK0")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    CUU0 = "CPUSCK0"
                    Local0 = PSTA (0x00)
                    Local1 = (Local0 & 0x03)
                    If (((LSTA != 0xFF) && (Local1 != LSTA)))
                    {
                        If ((Local1 == 0x03)){}
                        Else
                        {
                        }
                    }

                    LSTA = Local1
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = P0BM /* \P0BM */
                    While (Local1)
                    {
                        Local0 += (Local1 & 0x01)
                        Local1 >>= 0x01
                    }

                    Return ((0x00 | Local0))
                }

                Device (C000)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000000)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x00])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x00) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x00))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x00))
                        }
                    }
                }

                Device (C001)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000001)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x01])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x01) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x01))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x01))
                        }
                    }
                }

                Device (C002)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000002)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x02])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x02) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x02))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x02))
                        }
                    }
                }

                Device (C003)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000003)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x03])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x03) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x03))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x03))
                        }
                    }
                }

                Device (C004)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000004)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x04])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x04) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x04))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x04))
                        }
                    }
                }

                Device (C005)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000005)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x05])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x05) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x05))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x05))
                        }
                    }
                }

                Device (C006)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000006)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x06])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x06) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x06))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x06))
                        }
                    }
                }

                Device (C007)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000007)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x07])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x07) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x07))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x07))
                        }
                    }
                }

                Device (C008)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000008)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x08])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x08) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x08))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x08))
                        }
                    }
                }

                Device (C009)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000009)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x09])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x09) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x09))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x09))
                        }
                    }
                }

                Device (C00A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000000A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x0A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0A))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0A))
                        }
                    }
                }

                Device (C00B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000000B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x0B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0B))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0B))
                        }
                    }
                }

                Device (C00C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000000C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x0C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0C))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0C))
                        }
                    }
                }

                Device (C00D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000000D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x0D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0D))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0D))
                        }
                    }
                }

                Device (C00E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000000E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x0E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0E))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0E))
                        }
                    }
                }

                Device (C00F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000000F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x0F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x0F))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x0F))
                        }
                    }
                }

                Device (C010)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000010)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x10])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x10) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x10))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x10))
                        }
                    }
                }

                Device (C011)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000011)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x11])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x11) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x11))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x11))
                        }
                    }
                }

                Device (C012)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000012)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x12])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x12) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x12))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x12))
                        }
                    }
                }

                Device (C013)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000013)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x13])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x13) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x13))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x13))
                        }
                    }
                }

                Device (C014)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000014)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x14])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x14) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x14))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x14))
                        }
                    }
                }

                Device (C015)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000015)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x15])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x15) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x15))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x15))
                        }
                    }
                }

                Device (C016)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000016)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x16])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x16) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x16))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x16))
                        }
                    }
                }

                Device (C017)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000017)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x17])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x17) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x17))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x17))
                        }
                    }
                }

                Device (C018)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000018)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x18])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x18) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x18))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x18))
                        }
                    }
                }

                Device (C019)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000019)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x19])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x19) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x19))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x19))
                        }
                    }
                }

                Device (C01A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000001A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x1A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1A))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1A))
                        }
                    }
                }

                Device (C01B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000001B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x1B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1B))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1B))
                        }
                    }
                }

                Device (C01C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000001C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x1C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1C))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1C))
                        }
                    }
                }

                Device (C01D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000001D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x1D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1D))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1D))
                        }
                    }
                }

                Device (C01E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000001E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x1E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1E))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1E))
                        }
                    }
                }

                Device (C01F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000001F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x1F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x1F))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x1F))
                        }
                    }
                }

                Device (C020)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000020)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x20])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x20) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x20))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x20))
                        }
                    }
                }

                Device (C021)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000021)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x21])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x21) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x21))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x21))
                        }
                    }
                }

                Device (C022)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000022)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x22])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x22) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x22))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x22))
                        }
                    }
                }

                Device (C023)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000023)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x23])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x23) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x23))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x23))
                        }
                    }
                }

                Device (C024)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000024)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x24])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x24) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x24))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x24))
                        }
                    }
                }

                Device (C025)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000025)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x25])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x25) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x25))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x25))
                        }
                    }
                }

                Device (C026)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000026)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x26])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x26) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x26))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x26))
                        }
                    }
                }

                Device (C027)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000027)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x27])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x27) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x27))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x27))
                        }
                    }
                }

                Device (C028)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000028)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x28])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x28) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x28))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x28))
                        }
                    }
                }

                Device (C029)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000029)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x29])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x29) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x29))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x29))
                        }
                    }
                }

                Device (C02A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000002A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x2A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2A))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2A))
                        }
                    }
                }

                Device (C02B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000002B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x2B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2B))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2B))
                        }
                    }
                }

                Device (C02C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000002C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x2C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2C))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2C))
                        }
                    }
                }

                Device (C02D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000002D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x2D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2D))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2D))
                        }
                    }
                }

                Device (C02E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000002E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x2E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2E))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2E))
                        }
                    }
                }

                Device (C02F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000002F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x2F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x2F))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x2F))
                        }
                    }
                }

                Device (C030)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000030)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x30])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x30) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x30))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x30))
                        }
                    }
                }

                Device (C031)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000031)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x31])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x31) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x31))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x31))
                        }
                    }
                }

                Device (C032)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000032)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x32])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x32) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x32))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x32))
                        }
                    }
                }

                Device (C033)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000033)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x33])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x33) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x33))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x33))
                        }
                    }
                }

                Device (C034)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000034)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x34])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x34) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x34))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x34))
                        }
                    }
                }

                Device (C035)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000035)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x35])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x35) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x35))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x35))
                        }
                    }
                }

                Device (C036)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000036)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x36])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x36) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x36))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x36))
                        }
                    }
                }

                Device (C037)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000037)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x37])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x37) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x37))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x37))
                        }
                    }
                }

                Device (C038)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000038)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x38])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x38) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x38))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x38))
                        }
                    }
                }

                Device (C039)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000039)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x39])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x39) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x39))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x39))
                        }
                    }
                }

                Device (C03A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000003A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x3A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x3A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x3A))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x3A))
                        }
                    }
                }

                Device (C03B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000003B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x3B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x3B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x3B))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x3B))
                        }
                    }
                }

                Device (C03C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000003C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x3C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x3C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x3C))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x3C))
                        }
                    }
                }

                Device (C03D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000003D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x3D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x3D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x3D))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x3D))
                        }
                    }
                }

                Device (C03E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000003E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x3E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x3E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x3E))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x3E))
                        }
                    }
                }

                Device (C03F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000003F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x3F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x3F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x3F))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x3F))
                        }
                    }
                }

                Device (C040)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0040)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x40])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x40) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x40))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x40))
                        }
                    }
                }

                Device (C041)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0041)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x41])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x41) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x41))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x41))
                        }
                    }
                }

                Device (C042)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0042)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x42])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x42) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x42))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x42))
                        }
                    }
                }

                Device (C043)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0043)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x43])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x43) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x43))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x43))
                        }
                    }
                }

                Device (C044)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0044)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x44])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x44) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x44))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x44))
                        }
                    }
                }

                Device (C045)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0045)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x45])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x45) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x45))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x45))
                        }
                    }
                }

                Device (C046)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0046)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x46])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x46) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x46))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x46))
                        }
                    }
                }

                Device (C047)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0047)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x47])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x47) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x47))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x47))
                        }
                    }
                }

                Device (C048)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0048)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x48])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x48) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x48))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x48))
                        }
                    }
                }

                Device (C049)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0049)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x49])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x49) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x49))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x49))
                        }
                    }
                }

                Device (C04A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD004A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x4A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x4A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x4A))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x4A))
                        }
                    }
                }

                Device (C04B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD004B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x4B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x4B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x4B))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x4B))
                        }
                    }
                }

                Device (C04C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD004C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x4C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x4C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x4C))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x4C))
                        }
                    }
                }

                Device (C04D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD004D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x4D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x4D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x4D))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x4D))
                        }
                    }
                }

                Device (C04E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD004E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x4E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x4E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x4E))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x4E))
                        }
                    }
                }

                Device (C04F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD004F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x4F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x4F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x4F))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x4F))
                        }
                    }
                }

                Device (C050)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0050)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x50])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x50) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x50))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x50))
                        }
                    }
                }

                Device (C051)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0051)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x51])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x51) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x51))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x51))
                        }
                    }
                }

                Device (C052)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0052)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x52])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x52) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x52))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x52))
                        }
                    }
                }

                Device (C053)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0053)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x53])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x53) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x53))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x53))
                        }
                    }
                }

                Device (C054)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0054)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x54])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x54) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x54))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x54))
                        }
                    }
                }

                Device (C055)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0055)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x55])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x55) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x55))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x55))
                        }
                    }
                }

                Device (C056)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0056)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x56])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x56) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x56))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x56))
                        }
                    }
                }

                Device (C057)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0057)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x57])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x57) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x57))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x57))
                        }
                    }
                }

                Device (C058)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0058)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x58])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x58) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x58))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x58))
                        }
                    }
                }

                Device (C059)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0059)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x59])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x59) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x59))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x59))
                        }
                    }
                }

                Device (C05A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD005A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x5A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x5A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x5A))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x5A))
                        }
                    }
                }

                Device (C05B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD005B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x5B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x5B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x5B))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x5B))
                        }
                    }
                }

                Device (C05C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD005C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x5C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x5C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x5C))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x5C))
                        }
                    }
                }

                Device (C05D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD005D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x5D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x5D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x5D))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x5D))
                        }
                    }
                }

                Device (C05E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD005E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x5E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x5E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x5E))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x5E))
                        }
                    }
                }

                Device (C05F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD005F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x5F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x5F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x5F))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x5F))
                        }
                    }
                }

                Device (C060)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0060)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x60])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x60) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x60))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x60))
                        }
                    }
                }

                Device (C061)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0061)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x61])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x61) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x61))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x61))
                        }
                    }
                }

                Device (C062)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0062)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x62])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x62) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x62))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x62))
                        }
                    }
                }

                Device (C063)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0063)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x63])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x63) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x63))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x63))
                        }
                    }
                }

                Device (C064)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0064)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x64])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x64) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x64))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x64))
                        }
                    }
                }

                Device (C065)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0065)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x65])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x65) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x65))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x65))
                        }
                    }
                }

                Device (C066)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0066)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x66])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x66) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x66))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x66))
                        }
                    }
                }

                Device (C067)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0067)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x67])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x67) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x67))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x67))
                        }
                    }
                }

                Device (C068)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0068)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x68])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x68) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x68))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x68))
                        }
                    }
                }

                Device (C069)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0069)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x69])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x69) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x69))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x69))
                        }
                    }
                }

                Device (C06A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD006A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x6A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x6A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x6A))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x6A))
                        }
                    }
                }

                Device (C06B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD006B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x6B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x6B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x6B))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x6B))
                        }
                    }
                }

                Device (C06C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD006C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x6C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x6C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x6C))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x6C))
                        }
                    }
                }

                Device (C06D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD006D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x6D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x6D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x6D))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x6D))
                        }
                    }
                }

                Device (C06E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD006E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x6E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x6E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x6E))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x6E))
                        }
                    }
                }

                Device (C06F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD006F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x6F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x6F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x6F))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x6F))
                        }
                    }
                }

                Device (C070)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0070)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x70])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x70) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x70))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x70))
                        }
                    }
                }

                Device (C071)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0071)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x71])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x71) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x71))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x71))
                        }
                    }
                }

                Device (C072)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0072)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x72])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x72) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x72))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x72))
                        }
                    }
                }

                Device (C073)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0073)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x73])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x73) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x73))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x73))
                        }
                    }
                }

                Device (C074)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0074)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x74])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x74) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x74))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x74))
                        }
                    }
                }

                Device (C075)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0075)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x75])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x75) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x75))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x75))
                        }
                    }
                }

                Device (C076)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0076)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x76])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x76) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x76))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x76))
                        }
                    }
                }

                Device (C077)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0077)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x77])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x77) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x77))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x77))
                        }
                    }
                }

                Device (C078)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0078)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x78])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x78) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x78))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x78))
                        }
                    }
                }

                Device (C079)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD0079)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x79])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x79) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x79))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x79))
                        }
                    }
                }

                Device (C07A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD007A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x7A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x7A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x7A))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x7A))
                        }
                    }
                }

                Device (C07B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD007B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x7B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x7B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x7B))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x7B))
                        }
                    }
                }

                Device (C07C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD007C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x7C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x7C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x7C))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x7C))
                        }
                    }
                }

                Device (C07D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD007D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x7D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x7D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x7D))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x7D))
                        }
                    }
                }

                Device (C07E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD007E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x7E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x7E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x7E))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x7E))
                        }
                    }
                }

                Device (C07F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD007F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT0 [0x7F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x7F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x00, 0x7F))
                        }
                        Else
                        {
                            Return (LAPC (0x00, 0x7F))
                        }
                    }
                }
            }

            Device (SCK1)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK1")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    CUU1 = "CPUSCK1"
                    Local0 = PSTA (0x01)
                    Local1 = (Local0 & 0x03)
                    If (((LSTA != 0xFF) && (Local1 != LSTA)))
                    {
                        If ((Local1 == 0x03)){}
                        Else
                        {
                        }
                    }

                    LSTA = Local1
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = P1BM /* \P1BM */
                    While (Local1)
                    {
                        Local0 += (Local1 & 0x01)
                        Local1 >>= 0x01
                    }

                    Return ((0x0100 | Local0))
                }

                Device (C000)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000040)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x00])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x00) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x00))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x00))
                        }
                    }
                }

                Device (C001)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000041)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x01])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x01) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x01))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x01))
                        }
                    }
                }

                Device (C002)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000042)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x02])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x02) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x02))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x02))
                        }
                    }
                }

                Device (C003)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000043)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x03])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x03) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x03))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x03))
                        }
                    }
                }

                Device (C004)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000044)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x04])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x04) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x04))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x04))
                        }
                    }
                }

                Device (C005)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000045)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x05])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x05) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x05))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x05))
                        }
                    }
                }

                Device (C006)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000046)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x06])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x06) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x06))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x06))
                        }
                    }
                }

                Device (C007)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000047)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x07])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x07) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x07))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x07))
                        }
                    }
                }

                Device (C008)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000048)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x08])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x08) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x08))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x08))
                        }
                    }
                }

                Device (C009)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000049)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x09])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x09) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x09))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x09))
                        }
                    }
                }

                Device (C00A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000004A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x0A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x0A))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x0A))
                        }
                    }
                }

                Device (C00B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000004B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x0B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x0B))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x0B))
                        }
                    }
                }

                Device (C00C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000004C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x0C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x0C))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x0C))
                        }
                    }
                }

                Device (C00D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000004D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x0D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x0D))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x0D))
                        }
                    }
                }

                Device (C00E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000004E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x0E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x0E))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x0E))
                        }
                    }
                }

                Device (C00F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000004F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x0F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x0F))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x0F))
                        }
                    }
                }

                Device (C010)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000050)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x10])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x10) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x10))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x10))
                        }
                    }
                }

                Device (C011)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000051)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x11])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x11) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x11))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x11))
                        }
                    }
                }

                Device (C012)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000052)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x12])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x12) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x12))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x12))
                        }
                    }
                }

                Device (C013)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000053)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x13])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x13) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x13))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x13))
                        }
                    }
                }

                Device (C014)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000054)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x14])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x14) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x14))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x14))
                        }
                    }
                }

                Device (C015)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000055)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x15])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x15) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x15))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x15))
                        }
                    }
                }

                Device (C016)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000056)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x16])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x16) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x16))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x16))
                        }
                    }
                }

                Device (C017)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000057)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x17])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x17) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x17))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x17))
                        }
                    }
                }

                Device (C018)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000058)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x18])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x18) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x18))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x18))
                        }
                    }
                }

                Device (C019)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000059)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x19])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x19) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x19))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x19))
                        }
                    }
                }

                Device (C01A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000005A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x1A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x1A))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x1A))
                        }
                    }
                }

                Device (C01B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000005B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x1B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x1B))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x1B))
                        }
                    }
                }

                Device (C01C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000005C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x1C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x1C))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x1C))
                        }
                    }
                }

                Device (C01D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000005D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x1D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x1D))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x1D))
                        }
                    }
                }

                Device (C01E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000005E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x1E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x1E))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x1E))
                        }
                    }
                }

                Device (C01F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000005F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x1F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x1F))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x1F))
                        }
                    }
                }

                Device (C020)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000060)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x20])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x20) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x20))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x20))
                        }
                    }
                }

                Device (C021)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000061)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x21])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x21) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x21))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x21))
                        }
                    }
                }

                Device (C022)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000062)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x22])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x22) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x22))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x22))
                        }
                    }
                }

                Device (C023)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000063)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x23])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x23) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x23))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x23))
                        }
                    }
                }

                Device (C024)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000064)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x24])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x24) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x24))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x24))
                        }
                    }
                }

                Device (C025)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000065)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x25])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x25) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x25))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x25))
                        }
                    }
                }

                Device (C026)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000066)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x26])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x26) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x26))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x26))
                        }
                    }
                }

                Device (C027)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000067)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x27])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x27) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x27))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x27))
                        }
                    }
                }

                Device (C028)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000068)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x28])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x28) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x28))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x28))
                        }
                    }
                }

                Device (C029)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000069)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x29])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x29) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x29))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x29))
                        }
                    }
                }

                Device (C02A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000006A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x2A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x2A))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x2A))
                        }
                    }
                }

                Device (C02B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000006B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x2B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x2B))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x2B))
                        }
                    }
                }

                Device (C02C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000006C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x2C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x2C))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x2C))
                        }
                    }
                }

                Device (C02D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000006D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x2D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x2D))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x2D))
                        }
                    }
                }

                Device (C02E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000006E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x2E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x2E))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x2E))
                        }
                    }
                }

                Device (C02F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000006F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x2F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x2F))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x2F))
                        }
                    }
                }

                Device (C030)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000070)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x30])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x30) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x30))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x30))
                        }
                    }
                }

                Device (C031)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000071)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x31])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x31) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x31))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x31))
                        }
                    }
                }

                Device (C032)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000072)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x32])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x32) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x32))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x32))
                        }
                    }
                }

                Device (C033)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000073)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x33])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x33) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x33))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x33))
                        }
                    }
                }

                Device (C034)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000074)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x34])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x34) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x34))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x34))
                        }
                    }
                }

                Device (C035)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000075)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x35])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x35) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x35))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x35))
                        }
                    }
                }

                Device (C036)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000076)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x36])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x36) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x36))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x36))
                        }
                    }
                }

                Device (C037)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000077)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x37])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x37) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x37))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x37))
                        }
                    }
                }

                Device (C038)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000078)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x38])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x38) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x38))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x38))
                        }
                    }
                }

                Device (C039)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x00000079)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x39])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x39) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x39))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x39))
                        }
                    }
                }

                Device (C03A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000007A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x3A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x3A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x3A))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x3A))
                        }
                    }
                }

                Device (C03B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000007B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x3B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x3B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x3B))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x3B))
                        }
                    }
                }

                Device (C03C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000007C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x3C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x3C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x3C))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x3C))
                        }
                    }
                }

                Device (C03D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000007D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x3D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x3D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x3D))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x3D))
                        }
                    }
                }

                Device (C03E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000007E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x3E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x3E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x3E))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x3E))
                        }
                    }
                }

                Device (C03F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0x0000007F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x3F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x3F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x3F))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x3F))
                        }
                    }
                }

                Device (C040)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1040)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x40])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x40) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x40))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x40))
                        }
                    }
                }

                Device (C041)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1041)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x41])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x41) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x41))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x41))
                        }
                    }
                }

                Device (C042)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1042)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x42])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x42) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x42))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x42))
                        }
                    }
                }

                Device (C043)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1043)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x43])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x43) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x43))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x43))
                        }
                    }
                }

                Device (C044)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1044)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x44])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x44) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x44))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x44))
                        }
                    }
                }

                Device (C045)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1045)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x45])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x45) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x45))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x45))
                        }
                    }
                }

                Device (C046)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1046)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x46])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x46) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x46))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x46))
                        }
                    }
                }

                Device (C047)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1047)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x47])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x47) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x47))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x47))
                        }
                    }
                }

                Device (C048)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1048)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x48])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x48) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x48))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x48))
                        }
                    }
                }

                Device (C049)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1049)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x49])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x49) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x49))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x49))
                        }
                    }
                }

                Device (C04A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD104A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x4A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x4A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x4A))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x4A))
                        }
                    }
                }

                Device (C04B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD104B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x4B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x4B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x4B))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x4B))
                        }
                    }
                }

                Device (C04C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD104C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x4C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x4C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x4C))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x4C))
                        }
                    }
                }

                Device (C04D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD104D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x4D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x4D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x4D))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x4D))
                        }
                    }
                }

                Device (C04E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD104E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x4E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x4E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x4E))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x4E))
                        }
                    }
                }

                Device (C04F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD104F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x4F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x4F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x4F))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x4F))
                        }
                    }
                }

                Device (C050)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1050)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x50])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x50) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x50))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x50))
                        }
                    }
                }

                Device (C051)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1051)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x51])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x51) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x51))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x51))
                        }
                    }
                }

                Device (C052)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1052)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x52])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x52) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x52))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x52))
                        }
                    }
                }

                Device (C053)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1053)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x53])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x53) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x53))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x53))
                        }
                    }
                }

                Device (C054)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1054)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x54])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x54) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x54))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x54))
                        }
                    }
                }

                Device (C055)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1055)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x55])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x55) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x55))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x55))
                        }
                    }
                }

                Device (C056)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1056)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x56])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x56) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x56))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x56))
                        }
                    }
                }

                Device (C057)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1057)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x57])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x57) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x57))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x57))
                        }
                    }
                }

                Device (C058)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1058)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x58])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x58) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x58))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x58))
                        }
                    }
                }

                Device (C059)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1059)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x59])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x59) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x59))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x59))
                        }
                    }
                }

                Device (C05A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD105A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x5A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x5A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x5A))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x5A))
                        }
                    }
                }

                Device (C05B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD105B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x5B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x5B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x5B))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x5B))
                        }
                    }
                }

                Device (C05C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD105C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x5C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x5C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x5C))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x5C))
                        }
                    }
                }

                Device (C05D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD105D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x5D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x5D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x5D))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x5D))
                        }
                    }
                }

                Device (C05E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD105E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x5E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x5E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x5E))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x5E))
                        }
                    }
                }

                Device (C05F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD105F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x5F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x5F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x5F))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x5F))
                        }
                    }
                }

                Device (C060)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1060)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x60])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x60) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x60))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x60))
                        }
                    }
                }

                Device (C061)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1061)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x61])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x61) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x61))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x61))
                        }
                    }
                }

                Device (C062)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1062)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x62])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x62) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x62))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x62))
                        }
                    }
                }

                Device (C063)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1063)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x63])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x63) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x63))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x63))
                        }
                    }
                }

                Device (C064)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1064)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x64])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x64) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x64))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x64))
                        }
                    }
                }

                Device (C065)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1065)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x65])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x65) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x65))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x65))
                        }
                    }
                }

                Device (C066)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1066)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x66])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x66) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x66))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x66))
                        }
                    }
                }

                Device (C067)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1067)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x67])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x67) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x67))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x67))
                        }
                    }
                }

                Device (C068)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1068)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x68])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x68) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x68))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x68))
                        }
                    }
                }

                Device (C069)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1069)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x69])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x69) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x69))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x69))
                        }
                    }
                }

                Device (C06A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD106A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x6A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x6A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x6A))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x6A))
                        }
                    }
                }

                Device (C06B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD106B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x6B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x6B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x6B))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x6B))
                        }
                    }
                }

                Device (C06C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD106C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x6C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x6C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x6C))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x6C))
                        }
                    }
                }

                Device (C06D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD106D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x6D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x6D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x6D))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x6D))
                        }
                    }
                }

                Device (C06E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD106E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x6E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x6E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x6E))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x6E))
                        }
                    }
                }

                Device (C06F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD106F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x6F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x6F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x6F))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x6F))
                        }
                    }
                }

                Device (C070)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1070)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x70])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x70) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x70))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x70))
                        }
                    }
                }

                Device (C071)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1071)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x71])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x71) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x71))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x71))
                        }
                    }
                }

                Device (C072)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1072)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x72])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x72) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x72))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x72))
                        }
                    }
                }

                Device (C073)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1073)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x73])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x73) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x73))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x73))
                        }
                    }
                }

                Device (C074)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1074)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x74])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x74) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x74))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x74))
                        }
                    }
                }

                Device (C075)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1075)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x75])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x75) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x75))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x75))
                        }
                    }
                }

                Device (C076)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1076)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x76])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x76) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x76))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x76))
                        }
                    }
                }

                Device (C077)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1077)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x77])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x77) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x77))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x77))
                        }
                    }
                }

                Device (C078)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1078)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x78])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x78) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x78))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x78))
                        }
                    }
                }

                Device (C079)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD1079)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x79])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x79) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x79))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x79))
                        }
                    }
                }

                Device (C07A)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD107A)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x7A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x7A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x7A))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x7A))
                        }
                    }
                }

                Device (C07B)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD107B)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x7B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x7B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x7B))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x7B))
                        }
                    }
                }

                Device (C07C)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD107C)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x7C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x7C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x7C))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x7C))
                        }
                    }
                }

                Device (C07D)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD107D)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x7D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x7D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x7D))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x7D))
                        }
                    }
                }

                Device (C07E)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD107E)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x7E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x7E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x7E))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x7E))
                        }
                    }
                }

                Device (C07F)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, 0xDEAD107F)  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APT1 [0x7F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x7F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        If (SKOV)
                        {
                            Return (X2AP (0x01, 0x7F))
                        }
                        Else
                        {
                            Return (LAPC (0x01, 0x7F))
                        }
                    }
                }
            }
        }

        OperationRegion (IOB2, SystemIO, 0xB2, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8, 
            SMIS,   8
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = Arg3
            CreateDWordField (Local0, 0x04, CPBF)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If (((CPBF & 0x40) == 0x40))
                {
                    HWPS = 0x01
                }
            }

            If (CondRefOf (\_SB.OSPC))
            {
                Return (OSPC (Arg0, Arg1, Arg2, Arg3))
            }

            Return (Local0)
        }

        Device (EPC)
        {
            Name (_HID, EisaId ("INT0E0C"))  // _HID: Hardware ID
            Name (_STR, Unicode ("Enclave Page Cache 1.0"))  // _STR: Description String
            Name (_MLS, Package (0x01)  // _MLS: Multiple Language String
            {
                Package (0x02)
                {
                    "en", 
                    Unicode ("Enclave Page Cache 1.0")
                }
            })
            Name (RBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((EBA0 != 0x00))
                {
                    CreateQWordField (RBUF, \_SB.EPC._Y00._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y00._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y00._LEN, LEN0)  // _LEN: Length
                    MIN0 = EBA0 /* \EBA0 */
                    LEN0 = ELN0 /* \ELN0 */
                    MAX0 = ((EBA0 + ELN0) - 0x01)
                }

                If ((EBA1 != 0x00))
                {
                    CreateQWordField (RBUF, \_SB.EPC._Y01._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y01._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y01._LEN, LEN1)  // _LEN: Length
                    MIN1 = EBA1 /* \EBA1 */
                    LEN1 = ELN1 /* \ELN1 */
                    MAX1 = ((EBA1 + ELN1) - 0x01)
                }

                If ((EBA2 != 0x00))
                {
                    CreateQWordField (RBUF, \_SB.EPC._Y02._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y02._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y02._LEN, LEN2)  // _LEN: Length
                    MIN2 = EBA2 /* \EBA2 */
                    LEN2 = ELN2 /* \ELN2 */
                    MAX2 = ((EBA2 + ELN2) - 0x01)
                }

                If ((EBA3 != 0x00))
                {
                    CreateQWordField (RBUF, \_SB.EPC._Y03._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y03._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y03._LEN, LEN3)  // _LEN: Length
                    MIN3 = EBA3 /* \EBA3 */
                    LEN3 = ELN3 /* \ELN3 */
                    MAX3 = ((EBA3 + ELN3) - 0x01)
                }

                If ((EBA4 != 0x00))
                {
                    CreateQWordField (RBUF, \_SB.EPC._Y04._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y04._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y04._LEN, LEN4)  // _LEN: Length
                    MIN4 = EBA4 /* \EBA4 */
                    LEN4 = ELN4 /* \ELN4 */
                    MAX4 = ((EBA4 + ELN4) - 0x01)
                }

                If ((EBA5 != 0x00))
                {
                    CreateQWordField (RBUF, \_SB.EPC._Y05._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y05._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y05._LEN, LEN5)  // _LEN: Length
                    MIN5 = EBA5 /* \EBA5 */
                    LEN5 = ELN5 /* \ELN5 */
                    MAX5 = ((EBA5 + ELN5) - 0x01)
                }

                If ((EBA6 != 0x00))
                {
                    CreateQWordField (RBUF, \_SB.EPC._Y06._MIN, MIN6)  // _MIN: Minimum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y06._MAX, MAX6)  // _MAX: Maximum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y06._LEN, LEN6)  // _LEN: Length
                    MIN6 = EBA6 /* \EBA6 */
                    LEN6 = ELN6 /* \ELN6 */
                    MAX6 = ((EBA6 + ELN6) - 0x01)
                }

                If ((EBA7 != 0x00))
                {
                    CreateQWordField (RBUF, \_SB.EPC._Y07._MIN, MIN7)  // _MIN: Minimum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y07._MAX, MAX7)  // _MAX: Maximum Base Address
                    CreateQWordField (RBUF, \_SB.EPC._Y07._LEN, LEN7)  // _LEN: Length
                    MIN7 = EBA7 /* \EBA7 */
                    LEN7 = ELN7 /* \ELN7 */
                    MAX7 = ((EBA7 + ELN7) - 0x01)
                }

                Return (RBUF) /* \_SB_.EPC_.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((EPCS != 0x00))
                {
                    Return (0x0F)
                }

                Return (0x00)
            }
        }

        Method (OSCM, 1, NotSerialized)
        {
            If ((Arg0 == 0x01))
            {
                ^PC01.BR1A.OSHP ()
                ^PC01.BR1B.OSHP ()
                ^PC01.BR1C.OSHP ()
                ^PC01.BR1D.OSHP ()
            }

            If ((Arg0 == 0x02))
            {
                ^PC02.BR2A.OSHP ()
                ^PC02.BR2B.OSHP ()
                ^PC02.BR2C.OSHP ()
                ^PC02.BR2D.OSHP ()
            }

            If ((Arg0 == 0x03))
            {
                ^PC03.BR3A.OSHP ()
                ^PC03.BR3B.OSHP ()
                ^PC03.BR3C.OSHP ()
                ^PC03.BR3D.OSHP ()
            }

            If ((Arg0 == 0x04))
            {
                ^PC04.BR4A.OSHP ()
                ^PC04.BR4B.OSHP ()
                ^PC04.BR4C.OSHP ()
                ^PC04.BR4D.OSHP ()
            }

            If ((Arg0 == 0x05))
            {
                ^PC05.BR5A.OSHP ()
                ^PC05.BR5B.OSHP ()
                ^PC05.BR5C.OSHP ()
                ^PC05.BR5D.OSHP ()
            }

            If ((Arg0 == 0x07))
            {
                ^PC07.QR1A.OSHP ()
                ^PC07.QR1B.OSHP ()
                ^PC07.QR1C.OSHP ()
                ^PC07.QR1D.OSHP ()
            }

            If ((Arg0 == 0x08))
            {
                ^PC08.QR2A.OSHP ()
                ^PC08.QR2B.OSHP ()
                ^PC08.QR2C.OSHP ()
                ^PC08.QR2D.OSHP ()
            }

            If ((Arg0 == 0x09))
            {
                ^PC09.QR3A.OSHP ()
                ^PC09.QR3B.OSHP ()
                ^PC09.QR3C.OSHP ()
                ^PC09.QR3D.OSHP ()
            }

            If ((Arg0 == 0x0A))
            {
                ^PC10.QR4A.OSHP ()
                ^PC10.QR4B.OSHP ()
                ^PC10.QR4C.OSHP ()
                ^PC10.QR4D.OSHP ()
            }

            If ((Arg0 == 0x0B))
            {
                ^PC11.QR5A.OSHP ()
                ^PC11.QR5B.OSHP ()
                ^PC11.QR5C.OSHP ()
                ^PC11.QR5D.OSHP ()
            }
        }
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Name (PRSC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSC, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PG20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PG21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AG21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PD00, Package (0x2B)
        {
            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }
        })
        Name (AR00, Package (0x2B)
        {
            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }
        })
        Name (PD10, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR10, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG45, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG45, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PD18, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR18, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG4A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG4A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PD19, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR19, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PD1A, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR1A, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG54, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG54, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PG56, Package (0x00){})
        Name (AG56, Package (0x00){})
        Name (PD1B, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR1B, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG59, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG59, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PD1C, Package (0x2C)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR1C, Package (0x2C)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PD1D, Package (0x34)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR1D, Package (0x34)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PD20, Package (0x09)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }
        })
        Name (AR20, Package (0x09)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }
        })
        Name (PD30, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR30, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG83, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG83, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PD38, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR38, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG88, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG88, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PD39, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR39, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PD3A, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR3A, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG92, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG92, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PD3B, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AR3B, Package (0x10)
        {
            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
        Name (PG97, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG97, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PD3C, Package (0x2C)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR3C, Package (0x2C)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PD3D, Package (0x34)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR3D, Package (0x34)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Name (PGB6, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                0x00
            }
        })
        Name (AGB6, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x10
            }
        })
    }

    Scope (_SB)
    {
        Device (PC00)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (0x00)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                Return (0x00)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC00._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC00._OSC.CDW3 */
                    CTRL &= 0x1D
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xE3
                            }

                            ^^PC01.BR1A.OSHP ()
                            ^^PC01.BR1B.OSHP ()
                            ^^PC01.BR1C.OSHP ()
                            ^^PC01.BR1D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC00.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Device (APIC)
            {
                Name (_HID, EisaId ("PNP0003") /* IO-APIC Interrupt Controller */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEC00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                })
            }

            Name (P0RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0015,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0016,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x1000,             // Range Minimum
                    0x4FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x4000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFE010000,         // Range Minimum
                    0xFE010FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00001000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x90000000,         // Range Minimum
                    0x9B7FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0B800000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000200000000000, // Range Minimum
                    0x0000203FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            OperationRegion (TMEM, PCI_Config, 0x00, 0x0100)
            Field (TMEM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                    ,   4, 
                BSEG,   4, 
                PAMS,   48, 
                Offset (0x52), 
                DIM0,   4, 
                DIM1,   4, 
                Offset (0x54), 
                DIM2,   4
            }

            Name (MTBL, Package (0x10)
            {
                0x00, 
                0x20, 
                0x20, 
                0x30, 
                0x40, 
                0x40, 
                0x60, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0xC0, 
                0x0100, 
                0x0100, 
                0x0100, 
                0x0200
            })
            Name (ERNG, Package (0x0D)
            {
                0x000C0000, 
                0x000C4000, 
                0x000C8000, 
                0x000CC000, 
                0x000D0000, 
                0x000D4000, 
                0x000D8000, 
                0x000DC000, 
                0x000E0000, 
                0x000E4000, 
                0x000E8000, 
                0x000EC000, 
                0x000F0000
            })
            Name (PAMB, Buffer (0x07){})
            Method (EROM, 0, NotSerialized)
            {
                CreateDWordField (P0RS, \_SB.PC00._Y08._MIN, RMIN)  // _MIN: Minimum Base Address
                CreateDWordField (P0RS, \_SB.PC00._Y08._MAX, RMAX)  // _MAX: Maximum Base Address
                CreateDWordField (P0RS, \_SB.PC00._Y08._LEN, RLEN)  // _LEN: Length
                CreateByteField (PAMB, 0x06, BREG)
                PAMB = PAMS /* \_SB_.PC00.PAMS */
                BREG = BSEG /* \_SB_.PC00.BSEG */
                RMIN = 0x00
                RMAX = 0x00
                RLEN = 0x00
                Local0 = 0x00
                While ((Local0 < 0x0D))
                {
                    Local1 = (Local0 >> 0x01)
                    Local2 = DerefOf (PAMB [Local1])
                    If ((Local0 & 0x01))
                    {
                        Local2 >>= 0x04
                    }

                    Local2 &= 0x03
                    If (RMIN)
                    {
                        If (Local2)
                        {
                            RMAX = (DerefOf (ERNG [Local0]) + 0x3FFF)
                            If ((RMAX == 0x000F3FFF))
                            {
                                RMAX = 0x000FFFFF
                            }

                            RLEN = (RMAX - RMIN) /* \_SB_.PC00.EROM.RMIN */
                            RLEN++
                        }
                        Else
                        {
                            Local0 = 0x0C
                        }
                    }
                    ElseIf (Local2)
                    {
                        RMIN = DerefOf (ERNG [Local0])
                        RMAX = (DerefOf (ERNG [Local0]) + 0x3FFF)
                        If ((RMAX == 0x000F3FFF))
                        {
                            RMAX = 0x000FFFFF
                        }

                        RLEN = (RMAX - RMIN) /* \_SB_.PC00.EROM.RMIN */
                        RLEN++
                    }
                    Else
                    {
                    }

                    Local0++
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                EROM ()
                Return (P0RS) /* \_SB_.PC00.P0RS */
            }

            Device (IHC1)
            {
                Name (_ADR, 0x00100000)  // _ADR: Address
            }

            Device (IHC2)
            {
                Name (_ADR, 0x00100001)  // _ADR: Address
            }

            Device (IIDR)
            {
                Name (_ADR, 0x00100002)  // _ADR: Address
            }

            Device (IMKT)
            {
                Name (_ADR, 0x00100003)  // _ADR: Address
            }

            Device (IHC3)
            {
                Name (_ADR, 0x00100004)  // _ADR: Address
            }

            Device (MRO0)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
            }

            Device (MRO1)
            {
                Name (_ADR, 0x00110001)  // _ADR: Address
            }

            Device (SAT2)
            {
                Name (_ADR, 0x00110005)  // _ADR: Address
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
            }

            Device (TERM)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
            }

            Device (HEC1)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
            }

            Device (HEC2)
            {
                Name (_ADR, 0x00160001)  // _ADR: Address
            }

            Device (IDER)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
            }

            Device (MEKT)
            {
                Name (_ADR, 0x00160003)  // _ADR: Address
            }

            Device (HEC3)
            {
                Name (_ADR, 0x00160004)  // _ADR: Address
            }

            Device (SAT1)
            {
                Name (_ADR, 0x00170000)  // _ADR: Address
            }

            Device (RP17)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
            }

            Device (RP18)
            {
                Name (_ADR, 0x001B0001)  // _ADR: Address
            }

            Device (RP19)
            {
                Name (_ADR, 0x001B0002)  // _ADR: Address
            }

            Device (RP20)
            {
                Name (_ADR, 0x001B0003)  // _ADR: Address
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG1C) /* \_SB_.AG1C */
                    }

                    Return (PG1C) /* \_SB_.PG1C */
                }

                Device (SL03)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG20) /* \_SB_.AG20 */
                    }

                    Return (PG20) /* \_SB_.PG20 */
                }

                Device (SGBE)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG21) /* \_SB_.AG21 */
                    }

                    Return (PG21) /* \_SB_.PG21 */
                }

                Device (VB00)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (PICM)
                        {
                            Return (AGB6) /* \_SB_.AGB6 */
                        }

                        Return (PGB6) /* \_SB_.PGB6 */
                    }

                    Device (OVDL)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                    }
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
            }

            Device (RP09)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG24) /* \_SB_.AG24 */
                    }

                    Return (PG24) /* \_SB_.PG24 */
                }

                Device (PCM1)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (RP10)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
            }

            Device (RP11)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG26) /* \_SB_.AG26 */
                    }

                    Return (PG26) /* \_SB_.PG26 */
                }

                Device (PCM2)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (RP12)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
            }

            Device (RP13)
            {
                Name (_ADR, 0x001D0004)  // _ADR: Address
            }

            Device (RP14)
            {
                Name (_ADR, 0x001D0005)  // _ADR: Address
            }

            Device (RP15)
            {
                Name (_ADR, 0x001D0006)  // _ADR: Address
            }

            Device (RP16)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
            }

            Device (LPC0)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {4}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0074,             // Range Minimum
                            0x0074,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (FPU)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (XTRA)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (HPTE)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (CRS0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED01000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED02000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS3, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED03000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Switch (ToInteger (HPTB))
                        {
                            Case (0xFED00000)
                            {
                                Return (CRS0) /* \_SB_.PC00.LPC0.HPET.CRS0 */
                            }
                            Case (0xFED01000)
                            {
                                Return (CRS1) /* \_SB_.PC00.LPC0.HPET.CRS1 */
                            }
                            Case (0xFED02000)
                            {
                                Return (CRS2) /* \_SB_.PC00.LPC0.HPET.CRS2 */
                            }
                            Case (0xFED03000)
                            {
                                Return (CRS3) /* \_SB_.PC00.LPC0.HPET.CRS3 */
                            }

                        }

                        Return (CRS0) /* \_SB_.PC00.LPC0.HPET.CRS0 */
                    }
                }

                OperationRegion (LPCR, PCI_Config, 0x80, 0x04)
                Field (LPCR, ByteAcc, NoLock, Preserve)
                {
                    CADR,   3, 
                        ,   1, 
                    CBDR,   3, 
                    Offset (0x01), 
                    LTDR,   2, 
                        ,   2, 
                    FDDR,   1, 
                    Offset (0x02), 
                    CALE,   1, 
                    CBLE,   1, 
                    LTLE,   1, 
                    FDLE,   1, 
                    Offset (0x03), 
                    GLLE,   1, 
                    GHLE,   1, 
                    KCLE,   1, 
                    MCLE,   1, 
                    C1LE,   1, 
                    C2LE,   1, 
                    Offset (0x04)
                }

                Method (UXDV, 1, Serialized)
                {
                    Local0 = 0xFF
                    Switch ((Arg0 + 0x00))
                    {
                        Case (0x03F8)
                        {
                            Local0 = 0x00
                        }
                        Case (0x02F8)
                        {
                            Local0 = 0x01
                        }
                        Case (0x0220)
                        {
                            Local0 = 0x02
                        }
                        Case (0x0228)
                        {
                            Local0 = 0x03
                        }
                        Case (0x0238)
                        {
                            Local0 = 0x04
                        }
                        Case (0x02E8)
                        {
                            Local0 = 0x05
                        }
                        Case (0x0338)
                        {
                            Local0 = 0x06
                        }
                        Case (0x03E8)
                        {
                            Local0 = 0x07
                        }

                    }

                    Return (Local0)
                }

                Method (RRIO, 4, Serialized)
                {
                    Switch ((Arg0 + 0x00))
                    {
                        Case (0x00)
                        {
                            CALE = 0x00
                            Local0 = UXDV (Arg2)
                            If ((Local0 != 0xFF))
                            {
                                CADR = Local0
                            }

                            If (Arg1)
                            {
                                CALE = 0x01
                            }
                        }
                        Case (0x01)
                        {
                            CBLE = 0x00
                            Local0 = UXDV (Arg2)
                            If ((Local0 != 0xFF))
                            {
                                CBDR = Local0
                            }

                            If (Arg1)
                            {
                                CBLE = 0x01
                            }
                        }
                        Case (0x02)
                        {
                            LTLE = 0x00
                            If ((Arg2 == 0x0378))
                            {
                                LTDR = 0x00
                            }

                            If ((Arg2 == 0x0278))
                            {
                                LTDR = 0x01
                            }

                            If ((Arg2 == 0x03BC))
                            {
                                LTDR = 0x02
                            }

                            If (Arg1)
                            {
                                LTLE = 0x01
                            }
                        }
                        Case (0x03)
                        {
                            FDLE = 0x00
                            If ((Arg2 == 0x03F0))
                            {
                                FDDR = 0x00
                            }

                            If ((Arg2 == 0x0370))
                            {
                                FDDR = 0x01
                            }

                            If (Arg1)
                            {
                                FDLE = 0x01
                            }
                        }
                        Case (0x08)
                        {
                            If ((Arg2 == 0x0200))
                            {
                                If (Arg1)
                                {
                                    GLLE = 0x01
                                }
                                Else
                                {
                                    GLLE = 0x00
                                }
                            }

                            If ((Arg2 == 0x0208))
                            {
                                If (Arg1)
                                {
                                    GHLE = 0x01
                                }
                                Else
                                {
                                    GHLE = 0x00
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((Arg2 == 0x0200))
                            {
                                If (Arg1)
                                {
                                    GLLE = 0x01
                                }
                                Else
                                {
                                    GLLE = 0x00
                                }
                            }

                            If ((Arg2 == 0x0208))
                            {
                                If (Arg1)
                                {
                                    GHLE = 0x01
                                }
                                Else
                                {
                                    GHLE = 0x00
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (((Arg2 == 0x60) || (Arg2 == 0x64)))
                            {
                                If (Arg1)
                                {
                                    KCLE = 0x01
                                }
                                Else
                                {
                                    KCLE = 0x00
                                }
                            }
                        }
                        Case (0x0B)
                        {
                            If (((Arg2 == 0x62) || (Arg2 == 0x66)))
                            {
                                If (Arg1)
                                {
                                    MCLE = 0x01
                                }
                                Else
                                {
                                    MCLE = 0x00
                                }
                            }
                        }
                        Case (0x0C)
                        {
                            If ((Arg2 == 0x2E))
                            {
                                If (Arg1)
                                {
                                    C1LE = 0x01
                                }
                                Else
                                {
                                    C1LE = 0x00
                                }
                            }

                            If ((Arg2 == 0x4E))
                            {
                                If (Arg1)
                                {
                                    C2LE = 0x01
                                }
                                Else
                                {
                                    C2LE = 0x00
                                }
                            }
                        }
                        Case (0x0D)
                        {
                            If ((Arg2 == 0x2E))
                            {
                                If (Arg1)
                                {
                                    C1LE = 0x01
                                }
                                Else
                                {
                                    C1LE = 0x00
                                }
                            }

                            If ((Arg2 == 0x4E))
                            {
                                If (Arg1)
                                {
                                    C2LE = 0x01
                                }
                                Else
                                {
                                    C2LE = 0x00
                                }
                            }
                        }

                    }
                }

                Method (RDMA, 3, NotSerialized)
                {
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y09)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0A)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0B)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0C)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0D)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0E)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y09._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y09._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PC00.LPC0.SIO1._Y09._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y0A._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y0A._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PC00.LPC0.SIO1._Y0A._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y0B._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y0B._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PC00.LPC0.SIO1._Y0B._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y0C._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y0C._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PC00.LPC0.SIO1._Y0C._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y0D._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y0D._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PC00.LPC0.SIO1._Y0D._LEN, GPL4)  // _LEN: Length
                            GP40 = IO4B /* \IO4B */
                            GP41 = IO4B /* \IO4B */
                            GPL4 = IO4L /* \IO4L */
                        }

                        If (IO5B)
                        {
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y0E._MIN, GP50)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PC00.LPC0.SIO1._Y0E._MAX, GP51)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PC00.LPC0.SIO1._Y0E._LEN, GPL5)  // _LEN: Length
                            GP50 = IO5B /* \IO5B */
                            GP51 = IO5B /* \IO5B */
                            GPL5 = IO5L /* \IO5L */
                        }

                        Return (CRS) /* \_SB_.PC00.LPC0.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        Return (0x0105D041)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PC00.LPC0.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (0x00)
                        }

                        Local0 &= 0x01
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((0x01 << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (ESTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PC00.LPC0.SIO1.ACTR */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (0x00)
                        }

                        Local0 &= 0x01
                        If ((Arg0 > 0x0F))
                        {
                            IOES |= (Local0 << (Arg0 & 0x0F))
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 > 0x0F))
                        {
                            If (((0x01 << (Arg0 & 0x0F)) & IOES))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != 0x00)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y11)
                        IRQNoFlags (_Y0F)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y10)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PC00.LPC0.SIO1._Y0F._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PC00.LPC0.SIO1._Y10._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PC00.LPC0.SIO1._Y11._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PC00.LPC0.SIO1._Y11._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PC00.LPC0.SIO1._Y11._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y14)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y15)
                        IRQNoFlags (_Y12)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y13)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PC00.LPC0.SIO1._Y12._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PC00.LPC0.SIO1._Y13._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PC00.LPC0.SIO1._Y14._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PC00.LPC0.SIO1._Y14._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PC00.LPC0.SIO1._Y14._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PC00.LPC0.SIO1._Y15._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PC00.LPC0.SIO1._Y15._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PC00.LPC0.SIO1._Y15._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y18)
                        IRQ (Level, ActiveLow, Shared, _Y16)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y17)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PC00.LPC0.SIO1._Y16._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PC00.LPC0.SIO1._Y16._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PC00.LPC0.SIO1._Y17._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PC00.LPC0.SIO1._Y18._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PC00.LPC0.SIO1._Y18._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PC00.LPC0.SIO1._Y18._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PC00.LPC0.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PC00.LPC0.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (0x01 << INTR) /* \_SB_.PC00.LPC0.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = 0x00
                        }

                        If (((DMCH > 0x03) || (Arg1 == 0x00)))
                        {
                            DMAM = 0x00
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (0x01 << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PC00.LPC0.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PC00.LPC0.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PC00.LPC0.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PC00.LPC0.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PC00.LPC0.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (0x01 << INTR) /* \_SB_.PC00.LPC0.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = 0x00
                        }

                        If (((DMCH > 0x03) || (Arg1 == 0x00)))
                        {
                            DMAE = 0x00
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (0x01 << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PC00.LPC0.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PC00.LPC0.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PC00.LPC0.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (0x01 << INTR) /* \_SB_.PC00.LPC0.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = 0x00
                        }

                        If (((DMCH > 0x03) || (Arg1 == 0x00)))
                        {
                            DMAT = 0x00
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (0x01 << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PC00.LPC0.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x09, IRQM)
                        CreateByteField (Arg0, 0x0C, DMAM)
                        CreateWordField (Arg0, 0x02, IO11)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO11 & 0xFF)
                        IOAH = (IO11 >> 0x08)
                        If (IRQM)
                        {
                            FindSetRightBit (IRQM, Local0)
                            INTR = (Local0 - 0x01)
                        }
                        Else
                        {
                            INTR = 0x00
                        }

                        If (DMAM)
                        {
                            FindSetRightBit (DMAM, Local0)
                            DMCH = (Local0 - 0x01)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, 0x01)
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - 0x01)
                        }
                        Else
                        {
                            INTR = 0x00
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - 0x01)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, 0x01)
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - 0x01)
                        }
                        Else
                        {
                            INTR = 0x00
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - 0x01)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, 0x01)
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x02)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (0x00))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (0x00, 0x00)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (0x00, 0x00))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, 0x00)
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (UAR2)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Name (LDN, 0x03)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (0x01))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (0x01, 0x00)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (0x01, 0x00))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, 0x01)
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }
            }

            Device (P2SB)
            {
                Name (_ADR, 0x001F0001)  // _ADR: Address
            }

            Device (PMC1)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
            }

            Device (CAVS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
            }

            Device (SMBS)
            {
                Name (_ADR, 0x001F0004)  // _ADR: Address
            }

            Device (SPIC)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
            }

            Device (GBE1)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
            }

            Device (TRHB)
            {
                Name (_ADR, 0x001F0007)  // _ADR: Address
            }

            Device (IIM0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (CB0A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
            }

            Device (CB0B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
            }

            Device (CB0C)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
            }

            Device (CB0D)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
            }

            Device (CB0E)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
            }

            Device (CB0F)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
            }

            Device (CB0G)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
            }

            Device (CB0H)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
            }

            Device (MSM1)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (PMON)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
            }

            Device (NRP0)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
            }

            Device (DMI0)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }
        }

        Device (PC01)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN10, 0, NotSerialized)
            {
                Return (0x10)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN10 ())
            }

            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR10) /* \_SB_.AR10 */
                }

                Return (PD10) /* \_SB_.PD10 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, Serialized)  // _PXM: Device Proximity
            {
                Local0 = 0x00
                Switch (ToInteger (CLOD))
                {
                    Case (0x02)
                    {
                        Local0 *= CLOD /* \CLOD */
                    }
                    Case (0x04)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x01
                    }

                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x01
                If ((PRBM & Local0))
                {
                    Local1 = 0x02
                    If ((SPB0 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC01._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC01._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x10) != 0x10)))
                    {
                        CTRL &= 0xFFFFFFFFFFFFFFFE
                        Sleep (0x03E8)
                    }

                    CTRL &= 0xFFFFFFFFFFFFFFFD
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            OSCM (_UID)
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC01.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (RBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0016,             // Range Minimum
                    0x002F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x001A,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x5000,             // Range Minimum
                    0x6FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x2000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x9B800000,         // Range Minimum
                    0xA63FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0AC00000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000204000000000, // Range Minimum
                    0x0000207FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBRS) /* \_SB_.PC01.RBRS */
            }

            Device (BR1A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC01.BR1A.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC01.BR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC01.BR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC01.BR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC01.BR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC01.BR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC01.BR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC01.BR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC01.BR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC01.BR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC01.BR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC01.BR1A.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC01.BR1A._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC01.BR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC01.BR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC01.BR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC01.BR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC01.BR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC01.BR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG45) /* \_SB_.AG45 */
                    }

                    Return (PG45) /* \_SB_.PG45 */
                }

                Device (SL06)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR1B)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC01.BR1B.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC01.BR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC01.BR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC01.BR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC01.BR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC01.BR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC01.BR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC01.BR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC01.BR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC01.BR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC01.BR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC01.BR1B.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC01.BR1B._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC01.BR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC01.BR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC01.BR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC01.BR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC01.BR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC01.BR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (BR1C)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC01.BR1C.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC01.BR1C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC01.BR1C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC01.BR1C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC01.BR1C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC01.BR1C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC01.BR1C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC01.BR1C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC01.BR1C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC01.BR1C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC01.BR1C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC01.BR1C.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC01.BR1C._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC01.BR1C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC01.BR1C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC01.BR1C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC01.BR1C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC01.BR1C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC01.BR1C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (BR1D)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC01.BR1D.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC01.BR1D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC01.BR1D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC01.BR1D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC01.BR1D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC01.BR1D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC01.BR1D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC01.BR1D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC01.BR1D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC01.BR1D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC01.BR1D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC01.BR1D.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC01.BR1D._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC01.BR1D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC01.BR1D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC01.BR1D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC01.BR1D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC01.BR1D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC01.BR1D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC01.BR1D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }
        }

        Device (PC02)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN18, 0, NotSerialized)
            {
                Return (0x18)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN18 ())
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR18) /* \_SB_.AR18 */
                }

                Return (PD18) /* \_SB_.PD18 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, Serialized)  // _PXM: Device Proximity
            {
                Local0 = 0x00
                Switch (ToInteger (CLOD))
                {
                    Case (0x02)
                    {
                        Local0 *= CLOD /* \CLOD */
                    }
                    Case (0x04)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x01
                    }

                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x01
                If ((PRBM & Local0))
                {
                    Local1 = 0x04
                    If ((SPB0 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC02._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC02._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x10) != 0x10)))
                    {
                        CTRL &= 0xFFFFFFFFFFFFFFFE
                        Sleep (0x03E8)
                    }

                    CTRL &= 0xFFFFFFFFFFFFFFFD
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            OSCM (_UID)
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC02.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (RBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0030,             // Range Minimum
                    0x0049,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x001A,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x7000,             // Range Minimum
                    0x8FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x2000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xA6400000,         // Range Minimum
                    0xB0FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0AC00000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000208000000000, // Range Minimum
                    0x000020BFFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBRS) /* \_SB_.PC02.RBRS */
            }

            Device (BR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC02.BR2A.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC02.BR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC02.BR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC02.BR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC02.BR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC02.BR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC02.BR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC02.BR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC02.BR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC02.BR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC02.BR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC02.BR2A.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC02.BR2A._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC02.BR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC02.BR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC02.BR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC02.BR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC02.BR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC02.BR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG4A) /* \_SB_.AG4A */
                    }

                    Return (PG4A) /* \_SB_.PG4A */
                }

                Device (SL07)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2B)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC02.BR2B.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC02.BR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC02.BR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC02.BR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC02.BR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC02.BR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC02.BR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC02.BR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC02.BR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC02.BR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC02.BR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC02.BR2B.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC02.BR2B._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC02.BR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC02.BR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC02.BR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC02.BR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC02.BR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC02.BR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (BR2C)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC02.BR2C.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC02.BR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC02.BR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC02.BR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC02.BR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC02.BR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC02.BR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC02.BR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC02.BR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC02.BR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC02.BR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC02.BR2C.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC02.BR2C._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC02.BR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC02.BR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC02.BR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC02.BR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC02.BR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC02.BR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (BR2D)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC02.BR2D.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC02.BR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC02.BR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC02.BR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC02.BR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC02.BR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC02.BR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC02.BR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC02.BR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC02.BR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC02.BR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC02.BR2D.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC02.BR2D._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC02.BR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC02.BR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC02.BR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC02.BR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC02.BR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC02.BR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC02.BR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }
        }

        Device (PC03)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN19, 0, NotSerialized)
            {
                Return (0x19)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN19 ())
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, Serialized)  // _PXM: Device Proximity
            {
                Local0 = 0x00
                Switch (ToInteger (CLOD))
                {
                    Case (0x02)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x01
                    }
                    Case (0x04)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x02
                    }

                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x01
                If ((PRBM & Local0))
                {
                    Local1 = 0x08
                    If ((SPB0 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC03._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC03._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x10) != 0x10)))
                    {
                        CTRL &= 0xFFFFFFFFFFFFFFFE
                        Sleep (0x03E8)
                    }

                    CTRL &= 0xFFFFFFFFFFFFFFFD
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            OSCM (_UID)
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC03.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (RBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBRS) /* \_SB_.PC03.RBRS */
            }

            Device (BR3A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC03.BR3A.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC03.BR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC03.BR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC03.BR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC03.BR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC03.BR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC03.BR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC03.BR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC03.BR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC03.BR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC03.BR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC03.BR3A.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC03.BR3A._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC03.BR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC03.BR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC03.BR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC03.BR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC03.BR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC03.BR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (BR3B)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC03.BR3B.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC03.BR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC03.BR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC03.BR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC03.BR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC03.BR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC03.BR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC03.BR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC03.BR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC03.BR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC03.BR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC03.BR3B.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC03.BR3B._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC03.BR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC03.BR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC03.BR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC03.BR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC03.BR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC03.BR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (BR3C)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC03.BR3C.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC03.BR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC03.BR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC03.BR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC03.BR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC03.BR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC03.BR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC03.BR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC03.BR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC03.BR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC03.BR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC03.BR3C.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC03.BR3C._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC03.BR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC03.BR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC03.BR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC03.BR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC03.BR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC03.BR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (BR3D)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC03.BR3D.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC03.BR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC03.BR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC03.BR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC03.BR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC03.BR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC03.BR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC03.BR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC03.BR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC03.BR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC03.BR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC03.BR3D.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC03.BR3D._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC03.BR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC03.BR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC03.BR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC03.BR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC03.BR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC03.BR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC03.BR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }
        }

        Device (PC04)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN1A, 0, NotSerialized)
            {
                Return (0x1A)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN1A ())
            }

            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR1A) /* \_SB_.AR1A */
                }

                Return (PD1A) /* \_SB_.PD1A */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, Serialized)  // _PXM: Device Proximity
            {
                Local0 = 0x00
                Switch (ToInteger (CLOD))
                {
                    Case (0x02)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x01
                    }
                    Case (0x04)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x03
                    }

                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x01
                If ((PRBM & Local0))
                {
                    Local1 = 0x10
                    If ((SPB0 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC04._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC04._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x10) != 0x10)))
                    {
                        CTRL &= 0xFFFFFFFFFFFFFFFE
                        Sleep (0x03E8)
                    }

                    CTRL &= 0xFFFFFFFFFFFFFFFD
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            OSCM (_UID)
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC04.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (RBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x004A,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x001A,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x9000,             // Range Minimum
                    0x9FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x1000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xB1000000,         // Range Minimum
                    0xBBBFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0AC00000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x000020C000000000, // Range Minimum
                    0x000020FFFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBRS) /* \_SB_.PC04.RBRS */
            }

            Device (BR4A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC04.BR4A.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC04.BR4A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC04.BR4A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC04.BR4A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC04.BR4A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC04.BR4A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC04.BR4A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC04.BR4A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC04.BR4A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC04.BR4A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC04.BR4A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC04.BR4A.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC04.BR4A._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC04.BR4A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC04.BR4A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC04.BR4A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC04.BR4A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC04.BR4A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC04.BR4A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC04.BR4A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG54) /* \_SB_.AG54 */
                    }

                    Return (PG54) /* \_SB_.PG54 */
                }

                Device (SL02)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR4B)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC04.BR4B.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC04.BR4B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC04.BR4B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC04.BR4B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC04.BR4B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC04.BR4B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC04.BR4B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC04.BR4B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC04.BR4B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC04.BR4B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC04.BR4B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC04.BR4B.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC04.BR4B._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC04.BR4B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC04.BR4B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC04.BR4B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC04.BR4B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC04.BR4B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC04.BR4B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC04.BR4B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (BR4C)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC04.BR4C.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC04.BR4C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC04.BR4C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC04.BR4C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC04.BR4C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC04.BR4C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC04.BR4C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC04.BR4C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC04.BR4C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC04.BR4C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC04.BR4C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC04.BR4C.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC04.BR4C._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC04.BR4C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC04.BR4C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC04.BR4C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC04.BR4C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC04.BR4C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC04.BR4C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC04.BR4C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG56) /* \_SB_.AG56 */
                    }

                    Return (PG56) /* \_SB_.PG56 */
                }

                Device (D0C6)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (BR4D)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC04.BR4D.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC04.BR4D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC04.BR4D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC04.BR4D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC04.BR4D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC04.BR4D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC04.BR4D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC04.BR4D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC04.BR4D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC04.BR4D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC04.BR4D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC04.BR4D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC04.BR4D.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC04.BR4D._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC04.BR4D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC04.BR4D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC04.BR4D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC04.BR4D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC04.BR4D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC04.BR4D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC04.BR4D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC04.BR4D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }
        }

        Device (PC05)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN1B, 0, NotSerialized)
            {
                Return (0x1B)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN1B ())
            }

            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR1B) /* \_SB_.AR1B */
                }

                Return (PD1B) /* \_SB_.PD1B */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, Serialized)  // _PXM: Device Proximity
            {
                Local0 = 0x00
                Switch (ToInteger (CLOD))
                {
                    Case (0x02)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x01
                    }
                    Case (0x04)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x03
                    }

                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x01
                If ((PRBM & Local0))
                {
                    Local1 = 0x20
                    If ((SPB0 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC05._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC05._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x10) != 0x10)))
                    {
                        CTRL &= 0xFFFFFFFFFFFFFFFE
                        Sleep (0x03E8)
                    }

                    CTRL &= 0xFFFFFFFFFFFFFFFD
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            OSCM (_UID)
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC05.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (RBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0064,             // Range Minimum
                    0x007D,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x001A,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0xA000,             // Range Minimum
                    0xAFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x1000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xBBC00000,         // Range Minimum
                    0xC5FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0A400000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000210000000000, // Range Minimum
                    0x0000213FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBRS) /* \_SB_.PC05.RBRS */
            }

            Device (BR5A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC05.BR5A.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC05.BR5A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC05.BR5A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC05.BR5A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC05.BR5A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC05.BR5A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC05.BR5A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC05.BR5A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC05.BR5A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC05.BR5A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC05.BR5A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC05.BR5A.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC05.BR5A._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC05.BR5A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC05.BR5A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC05.BR5A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC05.BR5A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC05.BR5A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC05.BR5A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC05.BR5A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG59) /* \_SB_.AG59 */
                    }

                    Return (PG59) /* \_SB_.PG59 */
                }

                Device (OCL0)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (BR5B)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC05.BR5B.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC05.BR5B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC05.BR5B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC05.BR5B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC05.BR5B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC05.BR5B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC05.BR5B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC05.BR5B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC05.BR5B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC05.BR5B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC05.BR5B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC05.BR5B.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC05.BR5B._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC05.BR5B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC05.BR5B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC05.BR5B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC05.BR5B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC05.BR5B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC05.BR5B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC05.BR5B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (BR5C)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC05.BR5C.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC05.BR5C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC05.BR5C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC05.BR5C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC05.BR5C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC05.BR5C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC05.BR5C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC05.BR5C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC05.BR5C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC05.BR5C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC05.BR5C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC05.BR5C.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC05.BR5C._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC05.BR5C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC05.BR5C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC05.BR5C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC05.BR5C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC05.BR5C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC05.BR5C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC05.BR5C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (BR5D)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC05.BR5D.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC05.BR5D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC05.BR5D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC05.BR5D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC05.BR5D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC05.BR5D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC05.BR5D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC05.BR5D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC05.BR5D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC05.BR5D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC05.BR5D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC05.BR5D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC05.BR5D.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC05.BR5D._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC05.BR5D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC05.BR5D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC05.BR5D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC05.BR5D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC05.BR5D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC05.BR5D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC05.BR5D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC05.BR5D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }
        }

        Device (UC06)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN1C, 0, NotSerialized)
            {
                Return (0x1C)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN1C ())
            }

            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR1C) /* \_SB_.AR1C */
                }

                Return (PD1C) /* \_SB_.PD1C */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                Local0 = 0x00
                If (CLOD)
                {
                    Local0 *= CLOD /* \CLOD */
                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x01
                If ((PRBM & Local0))
                {
                    Local1 = 0x40
                    If ((SPB0 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.UC06._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UC06._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    CTRL &= 0x17
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UC06.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (UNRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x007E,             // Range Minimum
                    0x007E,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (UNRS) /* \_SB_.UC06.UNRS */
            }

            Device (UBX0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (UP00)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (UP01)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (M2U0)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
            }

            Device (M2U1)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
            }

            Device (M2U2)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
            }

            Device (CSM0)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
            }

            Device (M2M0)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
            }

            Device (M2M1)
            {
                Name (_ADR, 0x000D0000)  // _ADR: Address
            }

            Device (MCD0)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
            }

            Device (MCD1)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
            }
        }

        Device (UC07)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN1D, 0, NotSerialized)
            {
                Return (0x1D)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN1D ())
            }

            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR1D) /* \_SB_.AR1D */
                }

                Return (PD1D) /* \_SB_.PD1D */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                Local0 = 0x00
                If (CLOD)
                {
                    Local0 *= CLOD /* \CLOD */
                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG00) /* \SG00 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x01
                If ((PRBM & Local0))
                {
                    Local1 = 0x80
                    If ((SPB0 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.UC07._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UC07._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    CTRL &= 0x17
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UC07.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (UNRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x007F,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (UNRS) /* \_SB_.UC07.UNRS */
            }

            Device (CHA0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (CHA1)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
            }

            Device (CHA2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (CHA3)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (CHA4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CHA5)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
            }

            Device (CHA8)
            {
                Name (_ADR, 0x000D0000)  // _ADR: Address
            }

            Device (CHA9)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
            }

            Device (CHA6)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
            }

            Device (CHA7)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
            }

            Device (CA00)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
            }

            Device (PUC0)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
            }

            Device (GN30)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
            }
        }

        Device (PC06)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN20, 0, NotSerialized)
            {
                Return (0x20)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN20 ())
            }

            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR20) /* \_SB_.AR20 */
                }

                Return (PD20) /* \_SB_.PD20 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, Serialized)  // _PXM: Device Proximity
            {
                Local0 = 0x01
                Switch (ToInteger (CLOD))
                {
                    Case (0x02)
                    {
                        Local0 *= CLOD /* \CLOD */
                    }
                    Case (0x04)
                    {
                        Local0 *= CLOD /* \CLOD */
                    }

                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG01) /* \SG01 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x02
                If ((PRBM & Local0))
                {
                    Local1 = 0x01
                    If ((SPB1 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC06._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC06._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x10) != 0x10)))
                    {
                        CTRL &= 0xFFFFFFFFFFFFFFFE
                        Sleep (0x03E8)
                    }

                    CTRL &= 0xFFFFFFFFFFFFFFFD
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            OSCM (_UID)
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC06.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (RBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x0096,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0017,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0xB000,             // Range Minimum
                    0xBFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x1000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xC6800000,         // Range Minimum
                    0xD0FFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0A800000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000214000000000, // Range Minimum
                    0x0000217FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBRS) /* \_SB_.PC06.RBRS */
            }

            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Device (IIM1)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (CB1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
            }

            Device (CB1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
            }

            Device (CB1C)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
            }

            Device (CB1D)
            {
                Name (_ADR, 0x00010003)  // _ADR: Address
            }

            Device (CB1E)
            {
                Name (_ADR, 0x00010004)  // _ADR: Address
            }

            Device (CB1F)
            {
                Name (_ADR, 0x00010005)  // _ADR: Address
            }

            Device (CB1G)
            {
                Name (_ADR, 0x00010006)  // _ADR: Address
            }

            Device (CB1H)
            {
                Name (_ADR, 0x00010007)  // _ADR: Address
            }

            Device (NRP1)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
            }
        }

        Device (PC07)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN30, 0, NotSerialized)
            {
                Return (0x30)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN30 ())
            }

            Name (_UID, 0x09)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR30) /* \_SB_.AR30 */
                }

                Return (PD30) /* \_SB_.PD30 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, Serialized)  // _PXM: Device Proximity
            {
                Local0 = 0x01
                Switch (ToInteger (CLOD))
                {
                    Case (0x02)
                    {
                        Local0 *= CLOD /* \CLOD */
                    }
                    Case (0x04)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x01
                    }

                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG01) /* \SG01 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x02
                If ((PRBM & Local0))
                {
                    Local1 = 0x02
                    If ((SPB1 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC07._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC07._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x10) != 0x10)))
                    {
                        CTRL &= 0xFFFFFFFFFFFFFFFE
                        Sleep (0x03E8)
                    }

                    CTRL &= 0xFFFFFFFFFFFFFFFD
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            OSCM (_UID)
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC07.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (RBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0097,             // Range Minimum
                    0x00AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0019,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0xC000,             // Range Minimum
                    0xCFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x1000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xD1000000,         // Range Minimum
                    0xDBBFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0AC00000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000218000000000, // Range Minimum
                    0x000021BFFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBRS) /* \_SB_.PC07.RBRS */
            }

            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Device (QR1A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC07.QR1A.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC07.QR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC07.QR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC07.QR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC07.QR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC07.QR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC07.QR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC07.QR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC07.QR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC07.QR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC07.QR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC07.QR1A.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC07.QR1A._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC07.QR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC07.QR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC07.QR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC07.QR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC07.QR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC07.QR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC07.QR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG83) /* \_SB_.AG83 */
                    }

                    Return (PG83) /* \_SB_.PG83 */
                }

                Device (SL04)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (QR1B)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC07.QR1B.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC07.QR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC07.QR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC07.QR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC07.QR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC07.QR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC07.QR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC07.QR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC07.QR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC07.QR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC07.QR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC07.QR1B.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC07.QR1B._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC07.QR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC07.QR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC07.QR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC07.QR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC07.QR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC07.QR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC07.QR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (QR1C)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC07.QR1C.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC07.QR1C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC07.QR1C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC07.QR1C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC07.QR1C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC07.QR1C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC07.QR1C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC07.QR1C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC07.QR1C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC07.QR1C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC07.QR1C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC07.QR1C.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC07.QR1C._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC07.QR1C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC07.QR1C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC07.QR1C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC07.QR1C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC07.QR1C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC07.QR1C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC07.QR1C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (QR1D)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC07.QR1D.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC07.QR1D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC07.QR1D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC07.QR1D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC07.QR1D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC07.QR1D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC07.QR1D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC07.QR1D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC07.QR1D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC07.QR1D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC07.QR1D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC07.QR1D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC07.QR1D.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC07.QR1D._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC07.QR1D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC07.QR1D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC07.QR1D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC07.QR1D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC07.QR1D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC07.QR1D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC07.QR1D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC07.QR1D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }
        }

        Device (PC08)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN38, 0, NotSerialized)
            {
                Return (0x38)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN38 ())
            }

            Name (_UID, 0x0A)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR38) /* \_SB_.AR38 */
                }

                Return (PD38) /* \_SB_.PD38 */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, Serialized)  // _PXM: Device Proximity
            {
                Local0 = 0x01
                Switch (ToInteger (CLOD))
                {
                    Case (0x02)
                    {
                        Local0 *= CLOD /* \CLOD */
                    }
                    Case (0x04)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x01
                    }

                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG01) /* \SG01 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x02
                If ((PRBM & Local0))
                {
                    Local1 = 0x04
                    If ((SPB1 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC08._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC08._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x10) != 0x10)))
                    {
                        CTRL &= 0xFFFFFFFFFFFFFFFE
                        Sleep (0x03E8)
                    }

                    CTRL &= 0xFFFFFFFFFFFFFFFD
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            OSCM (_UID)
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC08.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (RBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00B0,             // Range Minimum
                    0x00C8,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0019,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0xD000,             // Range Minimum
                    0xDFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x1000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xDBC00000,         // Range Minimum
                    0xE67FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0AC00000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x000021C000000000, // Range Minimum
                    0x000021FFFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBRS) /* \_SB_.PC08.RBRS */
            }

            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Device (QR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC08.QR2A.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC08.QR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC08.QR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC08.QR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC08.QR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC08.QR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC08.QR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC08.QR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC08.QR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC08.QR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC08.QR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC08.QR2A.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC08.QR2A._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC08.QR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC08.QR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC08.QR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC08.QR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC08.QR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC08.QR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC08.QR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG88) /* \_SB_.AG88 */
                    }

                    Return (PG88) /* \_SB_.PG88 */
                }

                Device (SL09)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (QR2B)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC08.QR2B.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC08.QR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC08.QR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC08.QR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC08.QR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC08.QR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC08.QR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC08.QR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC08.QR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC08.QR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC08.QR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC08.QR2B.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC08.QR2B._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC08.QR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC08.QR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC08.QR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC08.QR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC08.QR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC08.QR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC08.QR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (QR2C)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC08.QR2C.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC08.QR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC08.QR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC08.QR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC08.QR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC08.QR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC08.QR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC08.QR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC08.QR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC08.QR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC08.QR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC08.QR2C.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC08.QR2C._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC08.QR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC08.QR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC08.QR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC08.QR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC08.QR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC08.QR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC08.QR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (QR2D)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC08.QR2D.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC08.QR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC08.QR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC08.QR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC08.QR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC08.QR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC08.QR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC08.QR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC08.QR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC08.QR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC08.QR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC08.QR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC08.QR2D.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC08.QR2D._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC08.QR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC08.QR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC08.QR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC08.QR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC08.QR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC08.QR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC08.QR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC08.QR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }
        }

        Device (PC09)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN39, 0, NotSerialized)
            {
                Return (0x39)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN39 ())
            }

            Name (_UID, 0x0B)  // _UID: Unique ID
            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, Serialized)  // _PXM: Device Proximity
            {
                Local0 = 0x01
                Switch (ToInteger (CLOD))
                {
                    Case (0x02)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x01
                    }
                    Case (0x04)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x02
                    }

                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG01) /* \SG01 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x02
                If ((PRBM & Local0))
                {
                    Local1 = 0x08
                    If ((SPB1 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC09._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC09._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x10) != 0x10)))
                    {
                        CTRL &= 0xFFFFFFFFFFFFFFFE
                        Sleep (0x03E8)
                    }

                    CTRL &= 0xFFFFFFFFFFFFFFFD
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            OSCM (_UID)
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC09.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (RBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBRS) /* \_SB_.PC09.RBRS */
            }

            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Device (QR3A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC09.QR3A.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC09.QR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC09.QR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC09.QR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC09.QR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC09.QR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC09.QR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC09.QR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC09.QR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC09.QR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC09.QR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC09.QR3A.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC09.QR3A._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC09.QR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC09.QR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC09.QR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC09.QR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC09.QR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC09.QR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC09.QR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (QR3B)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC09.QR3B.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC09.QR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC09.QR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC09.QR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC09.QR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC09.QR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC09.QR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC09.QR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC09.QR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC09.QR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC09.QR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC09.QR3B.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC09.QR3B._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC09.QR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC09.QR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC09.QR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC09.QR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC09.QR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC09.QR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC09.QR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (QR3C)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC09.QR3C.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC09.QR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC09.QR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC09.QR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC09.QR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC09.QR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC09.QR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC09.QR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC09.QR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC09.QR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC09.QR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC09.QR3C.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC09.QR3C._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC09.QR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC09.QR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC09.QR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC09.QR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC09.QR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC09.QR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC09.QR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (QR3D)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC09.QR3D.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC09.QR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC09.QR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC09.QR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC09.QR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC09.QR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC09.QR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC09.QR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC09.QR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC09.QR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC09.QR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC09.QR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC09.QR3D.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC09.QR3D._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC09.QR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC09.QR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC09.QR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC09.QR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC09.QR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC09.QR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC09.QR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC09.QR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }
        }

        Device (PC10)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN3A, 0, NotSerialized)
            {
                Return (0x3A)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN3A ())
            }

            Name (_UID, 0x0C)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR3A) /* \_SB_.AR3A */
                }

                Return (PD3A) /* \_SB_.PD3A */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, Serialized)  // _PXM: Device Proximity
            {
                Local0 = 0x01
                Switch (ToInteger (CLOD))
                {
                    Case (0x02)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x01
                    }
                    Case (0x04)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x03
                    }

                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG01) /* \SG01 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x02
                If ((PRBM & Local0))
                {
                    Local1 = 0x10
                    If ((SPB1 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC10._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC10._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x10) != 0x10)))
                    {
                        CTRL &= 0xFFFFFFFFFFFFFFFE
                        Sleep (0x03E8)
                    }

                    CTRL &= 0xFFFFFFFFFFFFFFFD
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            OSCM (_UID)
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC10.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (RBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00C9,             // Range Minimum
                    0x00E1,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0019,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0xE000,             // Range Minimum
                    0xEFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x1000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xE6800000,         // Range Minimum
                    0xF13FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0AC00000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000220000000000, // Range Minimum
                    0x0000223FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBRS) /* \_SB_.PC10.RBRS */
            }

            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Device (QR4A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC10.QR4A.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC10.QR4A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC10.QR4A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC10.QR4A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC10.QR4A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC10.QR4A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC10.QR4A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC10.QR4A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC10.QR4A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC10.QR4A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC10.QR4A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC10.QR4A.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC10.QR4A._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC10.QR4A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC10.QR4A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC10.QR4A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC10.QR4A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC10.QR4A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC10.QR4A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC10.QR4A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG92) /* \_SB_.AG92 */
                    }

                    Return (PG92) /* \_SB_.PG92 */
                }

                Device (SL08)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (QR4B)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC10.QR4B.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC10.QR4B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC10.QR4B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC10.QR4B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC10.QR4B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC10.QR4B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC10.QR4B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC10.QR4B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC10.QR4B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC10.QR4B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC10.QR4B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC10.QR4B.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC10.QR4B._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC10.QR4B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC10.QR4B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC10.QR4B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC10.QR4B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC10.QR4B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC10.QR4B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC10.QR4B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (QR4C)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC10.QR4C.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC10.QR4C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC10.QR4C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC10.QR4C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC10.QR4C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC10.QR4C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC10.QR4C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC10.QR4C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC10.QR4C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC10.QR4C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC10.QR4C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC10.QR4C.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC10.QR4C._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC10.QR4C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC10.QR4C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC10.QR4C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC10.QR4C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC10.QR4C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC10.QR4C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC10.QR4C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (QR4D)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC10.QR4D.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC10.QR4D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC10.QR4D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC10.QR4D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC10.QR4D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC10.QR4D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC10.QR4D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC10.QR4D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC10.QR4D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC10.QR4D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC10.QR4D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC10.QR4D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC10.QR4D.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC10.QR4D._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC10.QR4D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC10.QR4D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC10.QR4D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC10.QR4D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC10.QR4D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC10.QR4D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC10.QR4D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC10.QR4D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }
        }

        Device (PC11)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN3B, 0, NotSerialized)
            {
                Return (0x3B)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN3B ())
            }

            Name (_UID, 0x0D)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR3B) /* \_SB_.AR3B */
                }

                Return (PD3B) /* \_SB_.PD3B */
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_PXM, 0, Serialized)  // _PXM: Device Proximity
            {
                Local0 = 0x01
                Switch (ToInteger (CLOD))
                {
                    Case (0x02)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x01
                    }
                    Case (0x04)
                    {
                        Local0 *= CLOD /* \CLOD */
                        Local0 += 0x03
                    }

                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG01) /* \SG01 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x02
                If ((PRBM & Local0))
                {
                    Local1 = 0x20
                    If ((SPB1 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.PC11._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PC11._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x10) != 0x10)))
                    {
                        CTRL &= 0xFFFFFFFFFFFFFFFE
                        Sleep (0x03E8)
                    }

                    CTRL &= 0xFFFFFFFFFFFFFFFD
                    If (CondRefOf (\_SB.OSNC))
                    {
                        If (((CTRL & 0x08) == 0x08))
                        {
                            If ((SUPP & 0x08))
                            {
                                If (CondRefOf (^_SEG))
                                {
                                    Local0 = _SEG ()
                                }
                                Else
                                {
                                    Local0 = 0x00
                                }
                            }
                            Else
                            {
                                Local0 = 0x00
                            }

                            Local1 = _BBN ()
                            If (OSNC (Local0, Local1, SUPP, CTRL)){}
                            Else
                            {
                                CTRL &= 0xFFFFFFFFFFFFFF77
                            }
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFFFFFFFFF77
                        }
                    }
                    Else
                    {
                        CTRL &= 0xFFFFFFFFFFFFFF77
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            OSCM (_UID)
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PC11.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (RBRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00E2,             // Range Minimum
                    0x00FA,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0019,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0xF000,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x1000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xF1400000,         // Range Minimum
                    0xFB7FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0A400000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000224000000000, // Range Minimum
                    0x0000227FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (RBRS) /* \_SB_.PC11.RBRS */
            }

            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Device (QR5A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC11.QR5A.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5A.SCTL */
                    Local0 &= ALMK /* \_SB_.PC11.QR5A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC11.QR5A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC11.QR5A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC11.QR5A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5A.SCTL */
                    Local0 &= PLMK /* \_SB_.PC11.QR5A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC11.QR5A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC11.QR5A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC11.QR5A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC11.QR5A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC11.QR5A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC11.QR5A.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC11.QR5A._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC11.QR5A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC11.QR5A.ALMK */
                        Local0 |= ALBL /* \_SB_.PC11.QR5A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5A.SCTL */
                    Local0 |= SPOF /* \_SB_.PC11.QR5A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5A.SCTL */
                    Local0 |= PLOF /* \_SB_.PC11.QR5A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5A.SCTL */
                    Local0 |= ALOF /* \_SB_.PC11.QR5A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC11.QR5A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG97) /* \_SB_.AG97 */
                    }

                    Return (PG97) /* \_SB_.PG97 */
                }

                Device (OCL1)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (QR5B)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC11.QR5B.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5B.SCTL */
                    Local0 &= ALMK /* \_SB_.PC11.QR5B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC11.QR5B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC11.QR5B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC11.QR5B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5B.SCTL */
                    Local0 &= PLMK /* \_SB_.PC11.QR5B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC11.QR5B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC11.QR5B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC11.QR5B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC11.QR5B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC11.QR5B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC11.QR5B.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC11.QR5B._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC11.QR5B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC11.QR5B.ALMK */
                        Local0 |= ALBL /* \_SB_.PC11.QR5B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5B.SCTL */
                    Local0 |= SPOF /* \_SB_.PC11.QR5B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5B.SCTL */
                    Local0 |= PLOF /* \_SB_.PC11.QR5B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5B.SCTL */
                    Local0 |= ALOF /* \_SB_.PC11.QR5B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC11.QR5B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (QR5C)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC11.QR5C.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5C.SCTL */
                    Local0 &= ALMK /* \_SB_.PC11.QR5C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC11.QR5C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC11.QR5C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC11.QR5C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5C.SCTL */
                    Local0 &= PLMK /* \_SB_.PC11.QR5C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC11.QR5C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC11.QR5C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC11.QR5C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC11.QR5C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC11.QR5C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC11.QR5C.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC11.QR5C._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC11.QR5C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC11.QR5C.ALMK */
                        Local0 |= ALBL /* \_SB_.PC11.QR5C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5C.SCTL */
                    Local0 |= SPOF /* \_SB_.PC11.QR5C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5C.SCTL */
                    Local0 |= PLOF /* \_SB_.PC11.QR5C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5C.SCTL */
                    Local0 |= ALOF /* \_SB_.PC11.QR5C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC11.QR5C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }

            Device (QR5D)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    SERR, 
                    PERR
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PXCP, PCI_Config, IRPC, 0x40)
                Field (PXCP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0x12), 
                    Offset (0x14), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                        ,   14, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0x1A), 
                    SSTS,   7, 
                    Offset (0x1B), 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0x24)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    Local0 = SSTS /* \_SB_.PC11.QR5D.SSTS */
                    SSTS = Local0
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            If ((DBGM == 0x01))
                            {
                                IO80 = 0xFB
                            }

                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5D.SCTL */
                    Local0 &= ALMK /* \_SB_.PC11.QR5D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PC11.QR5D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PC11.QR5D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PC11.QR5D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5D.SCTL */
                    Local0 &= PLMK /* \_SB_.PC11.QR5D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PC11.QR5D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PC11.QR5D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PC11.QR5D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PC11.QR5D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PC11.QR5D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PC11.QR5D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }

                    If (CondRefOf (\_SB.EDOS))
                    {
                        EDOS (Arg0, Arg1, Arg2)
                    }
                }

                Method (FDSM, 4, Serialized)
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, 0x00, FUN0)
                                CreateBitField (OPTS, 0x0C, FUNC)
                                CreateBitField (OPTS, 0x0D, FUND)
                                FUN0 = 0x01
                                FUNC = 0x01
                                FUND = 0x01
                                Return (OPTS) /* \_SB_.PC11.QR5D.FDSM.OPTS */
                            }
                            Case (0x0C)
                            {
                                Return (0x01)
                            }
                            Case (0x0D)
                            {
                                Name (DLOC, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateField (DLOC, 0x00, 0x03, DFUN)
                                CreateField (DLOC, 0x03, 0x05, DDEV)
                                CreateField (DLOC, 0x08, 0x08, DBUS)
                                DBUS = _BBN ()
                                Local2 = _ADR /* \_SB_.PC11.QR5D._ADR */
                                Local3 = (Local2 & 0xFFFF)
                                Local4 = (Local2 >> 0x10)
                                DDEV = Local4
                                DFUN = Local3
                                Return (ToInteger (DLOC))
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }

                Method (EJ0L, 0, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFF
                    }

                    Local0 = SCTL /* \_SB_.PC11.QR5D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PC11.QR5D.ALMK */
                        Local0 |= ALBL /* \_SB_.PC11.QR5D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5D.SCTL */
                    Local0 |= SPOF /* \_SB_.PC11.QR5D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5D.SCTL */
                    Local0 |= PLOF /* \_SB_.PC11.QR5D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PC11.QR5D.SCTL */
                    Local0 |= ALOF /* \_SB_.PC11.QR5D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            If ((DBGM == 0x01))
                            {
                                If ((DBGM == 0x01))
                                {
                                    IO80 = Arg0
                                }
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFE
                    }

                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        If ((DBGM == 0x01))
                        {
                            IO80 = 0xFD
                        }

                        Sleep (0x0A)
                        If ((DBGM == 0x01))
                        {
                            IO80 = Arg0
                        }

                        Sleep (0x0A)
                        Local0 = PPXH ()
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xFC
                    }

                    Sleep (0x0A)
                }

                Method (PPXH, 0, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABIE = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            PWCM (0x03)
                            ATCM (0x02)
                            Return (0xFF)
                        }
                        Else
                        {
                            PWCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (MSCS (0x00))
                    {
                        MSCS (0x01)
                        If ((MSSC (0x00) == MRLS))
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x03)
                                PWCM (0x02)
                                Sleep (0x0258)
                                Local0 = 0x0258
                                ABPS (0x01)
                                While (!ABPS (0x00))
                                {
                                    Sleep (0xC8)
                                    Local0 += 0xC8
                                    If ((0x1388 == Local0))
                                    {
                                        ABIE = 0x01
                                        ATCM (0x03)
                                        LDIS = 0x00
                                        PWSL (0x01)
                                        Sleep (0x01F4)
                                        If (!PFDS (0x00))
                                        {
                                            PWCM (0x01)
                                            Local1 = 0x00
                                            ABIE = 0x01
                                        }
                                        Else
                                        {
                                            PWSL (0x00)
                                            PWCM (0x03)
                                            ATCM (0x01)
                                            LDIS = 0x01
                                            Local1 = 0x03
                                        }

                                        ABPS (0x01)
                                        Sleep (0xC8)
                                        Return (Local1)
                                    }
                                }

                                ABPS (0x01)
                                Sleep (0xC8)
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x02)
                                LDIS = 0x01
                                Return (0xFF)
                            }

                            PWSL (0x00)
                            PWCM (0x03)
                            ATCM (0x02)
                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            If (PRDS (0x00))
                            {
                                ATCM (0x02)
                                If (!PWCC ())
                                {
                                    PWSL (0x00)
                                    PWCM (0x03)
                                    LDIS = 0x01
                                    Return (0x03)
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }

                            ATCM (0x03)
                            Return (0xFF)
                        }
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            PWSL (0x01)
                            Sleep (0x01F4)
                            If (!PFDS (0x00))
                            {
                                PWCM (0x01)
                                Local1 = 0x00
                                ABIE = 0x01
                                ATCM (0x03)
                            }
                            Else
                            {
                                PWSL (0x00)
                                PWCM (0x03)
                                ATCM (0x01)
                                LDIS = 0x01
                                Local1 = 0x03
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PC11.QR5D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }
            }
        }

        Device (UC16)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN3C, 0, NotSerialized)
            {
                Return (0x3C)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN3C ())
            }

            Name (_UID, 0x0E)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR3C) /* \_SB_.AR3C */
                }

                Return (PD3C) /* \_SB_.PD3C */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                Local0 = 0x01
                If (CLOD)
                {
                    Local0 *= CLOD /* \CLOD */
                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG01) /* \SG01 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x02
                If ((PRBM & Local0))
                {
                    Local1 = 0x40
                    If ((SPB1 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.UC16._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UC16._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    CTRL &= 0x17
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UC16.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (UNRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FE,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (UNRS) /* \_SB_.UC16.UNRS */
            }

            Device (UBX1)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (UP02)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (UP03)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (M2U3)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
            }

            Device (M2U4)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
            }

            Device (M2U5)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
            }

            Device (CSM1)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
            }

            Device (M2M2)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
            }

            Device (M2M3)
            {
                Name (_ADR, 0x000D0000)  // _ADR: Address
            }

            Device (MCD2)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
            }

            Device (MCD3)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
            }
        }

        Device (UC17)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN3D, 0, NotSerialized)
            {
                Return (0x3D)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN3D ())
            }

            Name (_UID, 0x0F)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR3D) /* \_SB_.AR3D */
                }

                Return (PD3D) /* \_SB_.PD3D */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                Local0 = 0x01
                If (CLOD)
                {
                    Local0 *= CLOD /* \CLOD */
                }

                Return (Local0)
            }

            Method (_SEG, 0, NotSerialized)  // _SEG: PCI Segment
            {
                Return (SG01) /* \SG01 */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = 0x02
                If ((PRBM & Local0))
                {
                    Local1 = 0x80
                    If ((SPB1 & Local1))
                    {
                        Return (0x0F)
                    }
                }

                Return (0x00)
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, 0x04, CDW2)
                    If ((Arg2 > 0x02))
                    {
                        CreateDWordField (Arg3, 0x08, CDW3)
                    }

                    SUPP = CDW2 /* \_SB_.UC17._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UC17._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    CTRL &= 0x17
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UC17.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    If ((DBGM == 0x01))
                    {
                        IO80 = 0xEE
                    }

                    Return (Arg3)
                }
            }

            Name (UNRS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (UNRS) /* \_SB_.UC17.UNRS */
            }

            Device (DHA0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (DHA1)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
            }

            Device (DHA2)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (DHA3)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
            }

            Device (DHA4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (DHA5)
            {
                Name (_ADR, 0x000A0000)  // _ADR: Address
            }

            Device (DHA8)
            {
                Name (_ADR, 0x000D0000)  // _ADR: Address
            }

            Device (DHA9)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
            }

            Device (DHA6)
            {
                Name (_ADR, 0x000B0000)  // _ADR: Address
            }

            Device (DHA7)
            {
                Name (_ADR, 0x000C0000)  // _ADR: Address
            }

            Device (CA01)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
            }

            Device (PUC1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
            }

            Device (GN31)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (DS4, Package (0x04)
    {
        0x06, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            IPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            \_SB.PC00.LPC0.SIKC.BMCS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        \_SB.PC00.LPC0.SIKC.BMCW ()
        IWAK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB.PC00.LPC0)
    {
        Name (KCSD, 0x01)
        Name (BTID, 0x00)
        Name (SSIS, 0x00)
        Device (SIKC)
        {
            Name (_HID, EisaId ("IPI0001"))  // _HID: Hardware ID
            Name (_STR, Unicode ("IPMI_KCS"))  // _STR: Description String
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((KCSD && 0x01))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Name (KCSR, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x00,               // Alignment
                    0x00,               // Length
                    _Y19)
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x00,               // Alignment
                    0x00,               // Length
                    _Y1A)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (IDTP)
                {
                    CreateWordField (KCSR, \_SB.PC00.LPC0.SIKC._Y19._MIN, IPDB)  // _MIN: Minimum Base Address
                    CreateWordField (KCSR, \_SB.PC00.LPC0.SIKC._Y19._MAX, IPDH)  // _MAX: Maximum Base Address
                    CreateByteField (KCSR, \_SB.PC00.LPC0.SIKC._Y19._LEN, IPDL)  // _LEN: Length
                    IPDB = IDTP /* \IDTP */
                    IPDH = IDTP /* \IDTP */
                    IPDL = 0x01
                }

                If (ICDP)
                {
                    CreateWordField (KCSR, \_SB.PC00.LPC0.SIKC._Y1A._MIN, IPCB)  // _MIN: Minimum Base Address
                    CreateWordField (KCSR, \_SB.PC00.LPC0.SIKC._Y1A._MAX, IPCH)  // _MAX: Maximum Base Address
                    CreateByteField (KCSR, \_SB.PC00.LPC0.SIKC._Y1A._LEN, IPCL)  // _LEN: Length
                    IPCB = ICDP /* \ICDP */
                    IPCH = ICDP /* \ICDP */
                    IPCL = 0x01
                }

                Return (KCSR) /* \_SB_.PC00.LPC0.SIKC.KCSR */
            }

            Method (_IFT, 0, NotSerialized)  // _IFT: IPMI Interface Type
            {
                Return (0x01)
            }

            Method (_SRV, 0, NotSerialized)  // _SRV: IPMI Spec Revision
            {
                Return (SRVV) /* \SRVV */
            }
        }

        Device (SIBT)
        {
            Name (_HID, EisaId ("IPI0002"))  // _HID: Hardware ID
            Name (_STR, Unicode ("IPMI_BT"))  // _STR: Description String
            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((BTID && 0x01))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Name (BTRS, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x00,               // Alignment
                    0x00,               // Length
                    _Y1B)
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x00,               // Alignment
                    0x00,               // Length
                    _Y1C)
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x00,               // Alignment
                    0x00,               // Length
                    _Y1D)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (IPBT)
                {
                    CreateWordField (BTRS, \_SB.PC00.LPC0.SIBT._Y1B._MIN, BTCB)  // _MIN: Minimum Base Address
                    CreateWordField (BTRS, \_SB.PC00.LPC0.SIBT._Y1B._MAX, BTCH)  // _MAX: Maximum Base Address
                    CreateByteField (BTRS, \_SB.PC00.LPC0.SIBT._Y1B._LEN, CRDL)  // _LEN: Length
                    BTCB = IPBT /* \IPBT */
                    BTCH = IPBT /* \IPBT */
                    CRDL = 0x01
                }

                If (IBUF)
                {
                    CreateWordField (BTRS, \_SB.PC00.LPC0.SIBT._Y1C._MIN, BUFH)  // _MIN: Minimum Base Address
                    CreateWordField (BTRS, \_SB.PC00.LPC0.SIBT._Y1C._MAX, BUFL)  // _MAX: Maximum Base Address
                    CreateByteField (BTRS, \_SB.PC00.LPC0.SIBT._Y1C._LEN, BTBL)  // _LEN: Length
                    BUFH = IBUF /* \IBUF */
                    BUFL = IBUF /* \IBUF */
                    BTBL = 0x01
                }

                If (BTIM)
                {
                    CreateWordField (BTRS, \_SB.PC00.LPC0.SIBT._Y1D._MIN, IMBH)  // _MIN: Minimum Base Address
                    CreateWordField (BTRS, \_SB.PC00.LPC0.SIBT._Y1D._MAX, IMBL)  // _MAX: Maximum Base Address
                    CreateByteField (BTRS, \_SB.PC00.LPC0.SIBT._Y1D._LEN, BTIL)  // _LEN: Length
                    IMBH = BTIM /* \BTIM */
                    IMBL = BTIM /* \BTIM */
                    BTIL = 0x01
                }

                Return (BTRS) /* \_SB_.PC00.LPC0.SIBT.BTRS */
            }

            Method (_IFT, 0, NotSerialized)  // _IFT: IPMI Interface Type
            {
                Return (0x03)
            }

            Method (_SRV, 0, NotSerialized)  // _SRV: IPMI Spec Revision
            {
                Return (SRVV) /* \SRVV */
            }
        }

        Device (SSIF)
        {
            Name (_HID, EisaId ("IPI0003"))  // _HID: Hardware ID
            Name (_STR, Unicode ("IPMI_SSIF"))  // _STR: Description String
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SSIS && 0x01))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_IFT, 0, NotSerialized)  // _IFT: IPMI Interface Type
            {
                Return (0x04)
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (SADR) /* \SADR */
            }

            Method (_SRV, 0, NotSerialized)  // _SRV: IPMI Spec Revision
            {
                Return (SRVV) /* \SRVV */
            }
        }
    }

    Scope (_SB.PC00.LPC0.SIKC)
    {
        OperationRegion (IOB2, SystemIO, 0xB2, 0x01)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            SMIC = BSMI /* \BSMI */
        }

        Method (BMCS, 1, NotSerialized)
        {
            SMIC = (Arg0 + BSMI) /* \BSMI */
        }

        Method (BMCW, 0, NotSerialized)
        {
            SMIC = BSMI /* \BSMI */
        }
    }

    Scope (_SB.PC01)
    {
        Method (BN10, 0, NotSerialized)
        {
            Return (BB01) /* \BB01 */
        }
    }

    Scope (_SB.PC02)
    {
        Method (BN18, 0, NotSerialized)
        {
            Return (BB02) /* \BB02 */
        }
    }

    Scope (_SB.PC03)
    {
        Method (BN19, 0, NotSerialized)
        {
            Return (BB03) /* \BB03 */
        }
    }

    Scope (_SB.PC04)
    {
        Method (BN1A, 0, NotSerialized)
        {
            Return (BB04) /* \BB04 */
        }
    }

    Scope (_SB.PC05)
    {
        Method (BN1B, 0, NotSerialized)
        {
            Return (BB05) /* \BB05 */
        }
    }

    Scope (_SB.UC06)
    {
        Method (BN1C, 0, NotSerialized)
        {
            Return (BB06) /* \BB06 */
        }
    }

    Scope (_SB.UC07)
    {
        Method (BN1D, 0, NotSerialized)
        {
            Return (BB07) /* \BB07 */
        }
    }

    Scope (_SB.PC06)
    {
        Method (BN20, 0, NotSerialized)
        {
            Return (BB10) /* \BB10 */
        }
    }

    Scope (_SB.PC07)
    {
        Method (BN30, 0, NotSerialized)
        {
            Return (BB11) /* \BB11 */
        }
    }

    Scope (_SB.PC08)
    {
        Method (BN38, 0, NotSerialized)
        {
            Return (BB12) /* \BB12 */
        }
    }

    Scope (_SB.PC09)
    {
        Method (BN39, 0, NotSerialized)
        {
            Return (BB13) /* \BB13 */
        }
    }

    Scope (_SB.PC10)
    {
        Method (BN3A, 0, NotSerialized)
        {
            Return (BB14) /* \BB14 */
        }
    }

    Scope (_SB.PC11)
    {
        Method (BN3B, 0, NotSerialized)
        {
            Return (BB15) /* \BB15 */
        }
    }

    Scope (_SB.UC16)
    {
        Method (BN3C, 0, NotSerialized)
        {
            Return (BB16) /* \BB16 */
        }
    }

    Scope (_SB.UC17)
    {
        Method (BN3D, 0, NotSerialized)
        {
            Return (BB17) /* \BB17 */
        }
    }

    Scope (_SB.PC01.BR1A)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC01.BR1B)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC01.BR1C)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC01.BR1D)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC02.BR2A)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC02.BR2B)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC02.BR2C)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC02.BR2D)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC03.BR3A)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC03.BR3B)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC03.BR3C)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC03.BR3D)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC04.BR4A)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC04.BR4B)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC04.BR4C)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC04.BR4D)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC05.BR5A)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC05.BR5B)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC05.BR5C)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC05.BR5D)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC07.QR1A)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC07.QR1B)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC07.QR1C)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC07.QR1D)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC08.QR2A)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC08.QR2B)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC08.QR2C)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC08.QR2D)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC09.QR3A)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC09.QR3B)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC09.QR3C)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC09.QR3D)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC10.QR4A)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC10.QR4B)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC10.QR4C)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC10.QR4D)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC11.QR5A)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC11.QR5B)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC11.QR5C)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Scope (_SB.PC11.QR5D)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (Package (0x02)
            {
                0x09, 
                0x04
            })
        }
    }

    Name (PNVB, 0x6AEA9000)
    Name (PNVL, 0x026D)
    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        RCRV,   32, 
        PCHS,   16, 
        PCHG,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        NHLA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SBRG,   32, 
        GPEM,   32, 
        G2L0,   32, 
        G2L1,   32, 
        G2L2,   32, 
        G2L3,   32, 
        G2L4,   32, 
        G2L5,   32, 
        G2L6,   32, 
        G2L7,   32, 
        G2L8,   32, 
        G2L9,   32, 
        G2LA,   32, 
        G2LB,   32, 
        G2LC,   32, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        U0C0,   32, 
        U1C0,   32, 
        ADPM,   32, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SMD0,   8, 
        SMD1,   8, 
        SMD2,   8, 
        SMD3,   8, 
        SMD4,   8, 
        SMD5,   8, 
        SMD6,   8, 
        SMD7,   8, 
        SMD8,   8, 
        SMD9,   8, 
        SMDA,   8, 
        SIR0,   8, 
        SIR1,   8, 
        SIR2,   8, 
        SIR3,   8, 
        SIR4,   8, 
        SIR5,   8, 
        SIR6,   8, 
        SIR7,   8, 
        SIR8,   8, 
        SIR9,   8, 
        SIRA,   8, 
        SB00,   32, 
        SB01,   32, 
        SB02,   32, 
        SB03,   32, 
        SB04,   32, 
        SB05,   32, 
        SB06,   32, 
        SB07,   32, 
        SB08,   32, 
        SB09,   32, 
        SB0A,   32, 
        SB10,   32, 
        SB11,   32, 
        SB12,   32, 
        SB13,   32, 
        SB14,   32, 
        SB15,   32, 
        SB16,   32, 
        SB17,   32, 
        SB18,   32, 
        SB19,   32, 
        SB1A,   32, 
        GPEN,   8, 
        SGIR,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
        Offset (0x1F2), 
        SXRB,   32, 
        SXRS,   32, 
        CIOE,   8, 
        CIOI,   8, 
        TAEN,   8, 
        TIRQ,   8, 
        XWMB,   32, 
        EMH4,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        OBF1,   8, 
        OBF2,   8, 
        OBF3,   8, 
        OBF4,   8, 
        OBF5,   8, 
        OBF6,   8, 
        OBF7,   8, 
        OBF8,   8, 
        OBF9,   8, 
        OBFA,   8, 
        OBFB,   8, 
        OBFC,   8, 
        OBFD,   8, 
        OBFE,   8, 
        OBFF,   8, 
        OBFG,   8, 
        OBFH,   8, 
        OBFI,   8, 
        OBFJ,   8, 
        OBFK,   8, 
        ECR1,   8, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        MCFG,   32
    }

    Name (THMN, 0x20)
    Name (THCN, 0x16)
    Scope (\)
    {
        Method (THDA, 2, Serialized)
        {
            Local0 = 0xFE200000
            Local0 += (0x40 * (0x80 * (Arg0 - 0x20)))
            Local0 += (0x40 * Arg1)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (((Arg1 + Arg2) > SizeOf (Arg0)))
            {
                Return (0x00)
            }

            ToBuffer (Arg0, Local3)
            Local0 = 0x00
            Local1 = 0x00
            While ((Local1 < Arg2))
            {
                Local2 = DerefOf (Local3 [(Arg1 + Local1)])
                Local0 += (Local2 << (0x08 * Local1))
                Local1++
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If ((PTHM == 0x00))
            {
                Return (Zero)
            }
            ElseIf ((PTHM == 0x01))
            {
                If (!\_SB.PC00.PTHT.THEN ())
                {
                    Return (Zero)
                }
            }
            ElseIf ((PTHM == 0x02))
            {
                If (!\_SB.PTHH.THEN ())
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }

            Local0 = SizeOf (Arg0)
            Local1 = THDA (THMN, THCN)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, Preserve)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32, 
                Offset (0x10), 
                DO10,   32, 
                Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, Preserve)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, Preserve)
            {
                BO00,   8
            }

            DO10 = 0x01000242
            WO00 = Local0
            Local6 = 0x00
            Local7 = Local0
            While ((Local7 >= 0x08))
            {
                QO00 = STRD (Arg0, Local6, 0x08)
                Local6 += 0x08
                Local7 -= 0x08
            }

            If ((Local7 >= 0x04))
            {
                DO00 = STRD (Arg0, Local6, 0x04)
                Local6 += 0x04
                Local7 -= 0x04
            }

            If ((Local7 >= 0x02))
            {
                WO00 = STRD (Arg0, Local6, 0x02)
                Local6 += 0x02
                Local7 -= 0x02
            }

            If ((Local7 >= 0x01))
            {
                BO00 = STRD (Arg0, Local6, 0x01)
                Local6 += 0x01
                Local7 -= 0x01
            }

            DO30 = 0x00
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Name (SPTH, 0x01)
    Name (SPTL, 0x02)
    Method (PCHV, 0, NotSerialized)
    {
        If ((PCHS == 0x01))
        {
            Return (SPTH) /* \SPTH */
        }

        If ((PCHS == 0x02))
        {
            Return (SPTL) /* \SPTL */
        }

        Return (0x00)
    }

    Scope (_SB.PC00)
    {
        Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
        Method (PCID, 4, Serialized)
        {
            If ((Arg0 == PCIG))
            {
                If ((Arg1 >= 0x03))
                {
                    If ((Arg2 == 0x00))
                    {
                        Return (Buffer (0x02)
                        {
                             0x01, 0x03                                       // ..
                        })
                    }

                    If ((Arg2 == 0x08))
                    {
                        Return (0x01)
                    }

                    If ((Arg2 == 0x09))
                    {
                        Return (Package (0x05)
                        {
                            0xC350, 
                            Ones, 
                            Ones, 
                            0xC350, 
                            Ones
                        })
                    }
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }

        Method (PCIC, 1, Serialized)
        {
            If ((ECR1 == 0x01))
            {
                If ((Arg0 == PCIG))
                {
                    Return (0x01)
                }
            }

            Return (0x00)
        }
    }

    Scope (_GPE)
    {
        Method (_L6D, 0, Serialized)  // _Lxx: Level-Triggered GPE
        {
            \_SB.PC00.XHCI.GPEH ()
            \_SB.PC00.CAVS.GPEH ()
            \_SB.PC00.GBE1.GPEH ()
        }
    }

    Scope (_SB.PC00)
    {
        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "PCHRESV")  // _UID: Unique ID
            Name (_STA, 0x03)  // _STA: Status
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFD000000,         // Address Base
                        0x00AC0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFDAD0000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFDB00000,         // Address Base
                        0x00500000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00010000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE011000,         // Address Base
                        0x0000F000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE036000,         // Address Base
                        0x00006000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE03D000,         // Address Base
                        0x003C3000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE410000,         // Address Base
                        0x003F0000,         // Address Length
                        )
                })
                Return (BUF0) /* \_SB_.PC00.PRRE._CRS.BUF0 */
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "IoTraps")  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    _Y1E)
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    _Y1F)
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    _Y20)
                IO (Decode16,
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    _Y21)
            })
            CreateWordField (BUF0, \_SB.PC00.IOTR._Y1E._MIN, AMI0)  // _MIN: Minimum Base Address
            CreateWordField (BUF0, \_SB.PC00.IOTR._Y1E._MAX, AMA0)  // _MAX: Maximum Base Address
            CreateWordField (BUF0, \_SB.PC00.IOTR._Y1F._MIN, AMI1)  // _MIN: Minimum Base Address
            CreateWordField (BUF0, \_SB.PC00.IOTR._Y1F._MAX, AMA1)  // _MAX: Maximum Base Address
            CreateWordField (BUF0, \_SB.PC00.IOTR._Y20._MIN, AMI2)  // _MIN: Minimum Base Address
            CreateWordField (BUF0, \_SB.PC00.IOTR._Y20._MAX, AMA2)  // _MAX: Maximum Base Address
            CreateWordField (BUF0, \_SB.PC00.IOTR._Y21._MIN, AMI3)  // _MIN: Minimum Base Address
            CreateWordField (BUF0, \_SB.PC00.IOTR._Y21._MAX, AMA3)  // _MAX: Maximum Base Address
            CreateByteField (BUF0, \_SB.PC00.IOTR._Y1E._LEN, LEN0)  // _LEN: Length
            CreateByteField (BUF0, \_SB.PC00.IOTR._Y1F._LEN, LEN1)  // _LEN: Length
            CreateByteField (BUF0, \_SB.PC00.IOTR._Y20._LEN, LEN2)  // _LEN: Length
            CreateByteField (BUF0, \_SB.PC00.IOTR._Y21._LEN, LEN3)  // _LEN: Length
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                AMI0 = ITA0 /* \ITA0 */
                AMA0 = ITA0 /* \ITA0 */
                AMI1 = ITA1 /* \ITA1 */
                AMA1 = ITA1 /* \ITA1 */
                AMI2 = ITA2 /* \ITA2 */
                AMA2 = ITA2 /* \ITA2 */
                AMI3 = ITA3 /* \ITA3 */
                AMA3 = ITA3 /* \ITA3 */
                If ((ITS0 != 0x01))
                {
                    LEN0 = 0x00
                }

                If ((ITS1 != 0x01))
                {
                    LEN1 = 0x00
                }

                If ((ITS2 != 0x01))
                {
                    LEN2 = 0x00
                }

                If ((ITS3 != 0x01))
                {
                    LEN3 = 0x00
                }

                Return (BUF0) /* \_SB_.PC00.IOTR.BUF0 */
            }
        }

        Scope (LPC0)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            OperationRegion (LPC, PCI_Config, 0x00, 0x0100)
            Field (LPC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                CDID,   16, 
                Offset (0x08), 
                CRID,   8, 
                Offset (0x80), 
                IOD0,   8, 
                IOD1,   8, 
                Offset (0xA0), 
                    ,   9, 
                PRBL,   1, 
                Offset (0xAC), 
                Offset (0xAD), 
                Offset (0xAE), 
                XUSB,   1, 
                Offset (0xB8), 
                    ,   22, 
                GR0B,   2, 
                Offset (0xBC), 
                    ,   2, 
                GR19,   2, 
                Offset (0xC0), 
                Offset (0xDC), 
                    ,   2, 
                ESPI,   1
            }
        }

        Scope (PMC1)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            OperationRegion (PMCB, PCI_Config, 0x00, 0x0100)
            Field (PMCB, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x40), 
                Offset (0x41), 
                ACBA,   8, 
                Offset (0x48), 
                    ,   12, 
                PWBA,   20
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (\)
    {
        Method (PCRR, 2, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0) /* \PCRR.DAT0 */
        }

        Method (PCRW, 3, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            DAT0 = Arg2
            OperationRegion (PCR1, SystemMemory, (SBRG + 0x00C73418), 0x04)
            Field (PCR1, DWordAcc, Lock, Preserve)
            {
                DAT1,   32
            }
        }

        Method (PCRO, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 | Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 & Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = ((Local0 & Arg2) | Arg3)
            PCRW (Arg0, Arg1, Local1)
        }

        Name (PMBV, 0x00)
        Method (PMB1, 0, NotSerialized)
        {
            If ((PMBV == 0x00))
            {
                PMBV = (\_SB.PC00.PMC1.ACBA << 0x08)
            }

            Return (PMBV) /* \PMBV */
        }

        Name (PWRV, 0x00)
        Method (PWRM, 0, NotSerialized)
        {
            If ((PWRV == 0x00))
            {
                PWRV = (\_SB.PC00.PMC1.PWBA << 0x0C)
            }

            Return (PWRV) /* \PWRV */
        }

        OperationRegion (PMIO, SystemIO, PMB1 (), 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PBSS,   1, 
            Offset (0x40), 
                ,   17, 
            GPEC,   1
        }

        OperationRegion (PMLP, SystemIO, (PMB1 () + 0x80), 0x20)
        Field (PMLP, ByteAcc, NoLock, Preserve)
        {
            Offset (0x10), 
            Offset (0x11), 
            GE08,   1, 
                ,   8, 
            GE17,   1, 
                ,   17, 
            GE35,   1, 
                ,   9, 
            GE45,   1, 
            Offset (0x16), 
            GE48,   1, 
                ,   2, 
            GE51,   1, 
            Offset (0x20)
        }

        Field (PMLP, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x01), 
            GS08,   1, 
                ,   8, 
            GS17,   1, 
                ,   17, 
            GS35,   1, 
                ,   9, 
            GS45,   1, 
            Offset (0x06), 
            GS48,   1, 
                ,   2, 
            GS51,   1, 
                ,   2, 
            GS54,   1, 
            GS55,   1, 
                ,   42, 
            GS98,   1, 
            Offset (0x10)
        }

        OperationRegion (PWMR, SystemMemory, PWRM (), 0x0800)
        Field (PWMR, AnyAcc, NoLock, Preserve)
        {
            Offset (0xE0), 
            Offset (0xE2), 
            DWLE,   1, 
            HWLE,   1
        }

        OperationRegion (PMST, SystemMemory, PWRV, 0x80)
        Field (PMST, DWordAcc, NoLock, Preserve)
        {
            Offset (0x18), 
                ,   25, 
            USBP,   1, 
            Offset (0x1C), 
            Offset (0x1F), 
            PMFS,   1, 
            Offset (0x20), 
            MPMC,   32, 
                ,   20, 
            UWAB,   1
        }
    }

    Scope (_SB.PC00)
    {
        Name (LTRN, 0x00)
        Name (OBFN, 0x00)
        Name (LMSL, 0x00)
        Name (LNSL, 0x00)
        Scope (GBE1)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            OperationRegion (GLBA, PCI_Config, 0x00, 0x0100)
            Field (GLBA, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0xCC), 
                Offset (0xCD), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If ((PMEE && PMES))
                {
                    PMES = 0x01
                    Notify (GBE1, 0x02) // Device Wake
                }
            }
        }
    }

    Scope (_SB.PC00.XHCI)
    {
        OperationRegion (XPRT, PCI_Config, 0x00, 0x0100)
        Field (XPRT, AnyAcc, NoLock, Preserve)
        {
            DVID,   16, 
            Offset (0x74), 
            D0D3,   2, 
            Offset (0x75), 
            PMEE,   1, 
                ,   6, 
            PMES,   1, 
            Offset (0xA8), 
                ,   13, 
            MW13,   1, 
            MW14,   1, 
            Offset (0xAC), 
            Offset (0xB0), 
                ,   13, 
            MB13,   1, 
            MB14,   1, 
            Offset (0xB4), 
            Offset (0xD0), 
            PR2,    32, 
            PR2M,   32, 
            PR3,    32, 
            PR3M,   32
        }

        Name (XFLT, 0x00)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If (PCIC (Arg0))
            {
                Return (PCID (Arg0, Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("ac340cb7-e901-45bf-b7e6-2b34ec931e23")))
            {
                If ((Arg1 == 0x03))
                {
                    XFLT = Arg1
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }

        Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
        {
            Return (0x03)
        }

        Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
        {
            Return (0x03)
        }

        Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
        {
            Return (0x03)
        }

        Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
        {
            Return (0x03)
        }

        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((XFLT == Zero))
            {
                Return (0x00)
            }
            Else
            {
                Return (0x03)
            }
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x6D, 0x04))
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            PMEE = Arg0
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (CondRefOf (\_SB.PC00.XHCI.RHUB.INIR))
            {
                ^RHUB.INIR ()
            }
        }

        Method (GPEH, 0, NotSerialized)
        {
            If ((DVID == 0xFFFF))
            {
                Return (Zero)
            }

            Local0 = PMES /* \_SB_.PC00.XHCI.PMES */
            PMES = 0x01
            If ((PMEE && Local0))
            {
                Notify (XHCI, 0x02) // Device Wake
            }
        }

        OperationRegion (XHCP, SystemMemory, (MCFG + 0x000A0000), 0x0100)
        Field (XHCP, AnyAcc, Lock, Preserve)
        {
            Offset (0x04), 
            PDBM,   16, 
            Offset (0x10), 
            MEMB,   64
        }

        Method (USRA, 0, Serialized)
        {
            If ((PCHV () == SPTH))
            {
                Return (0x0F)
            }
            Else
            {
                Return (0x0B)
            }
        }

        Method (SSPA, 0, Serialized)
        {
            If ((PCHV () == SPTH))
            {
                Return (0x11)
            }
            Else
            {
                Return (0x0D)
            }
        }

        Name (XRST, Zero)
        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
        {
            If ((DVID == 0xFFFF))
            {
                Return (Zero)
            }

            Local2 = MEMB /* \_SB_.PC00.XHCI.MEMB */
            Local1 = PDBM /* \_SB_.PC00.XHCI.PDBM */
            PDBM &= 0xFFFFFFFFFFFFFFF9
            D0D3 = 0x00
            MEMB = XWMB /* \XWMB */
            PDBM = (Local1 | 0x02)
            PDBM &= 0xFFFFFFFFFFFFFFFD
            MEMB = Local2
            PDBM = Local1
            If (CondRefOf (\_SB.PC00.XHCI.PS0X))
            {
                PS0X ()
            }

            If ((UWAB && (D0D3 == 0x00)))
            {
                MPMC = 0x01
                While (PMFS)
                {
                    Sleep (0x0A)
                }
            }
        }

        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
        {
            If ((DVID == 0xFFFF))
            {
                Return (Zero)
            }

            Local2 = MEMB /* \_SB_.PC00.XHCI.MEMB */
            Local1 = PDBM /* \_SB_.PC00.XHCI.PDBM */
            PDBM &= 0xFFFFFFFFFFFFFFF9
            D0D3 = 0x00
            MEMB = XWMB /* \XWMB */
            PDBM = (Local1 | 0x02)
            PDBM &= 0xFFFFFFFFFFFFFFFD
            D0D3 = 0x03
            MEMB = Local2
            PDBM = Local1
            If (CondRefOf (\_SB.PC00.XHCI.PS3X))
            {
                PS3X ()
            }

            If ((UWAB && (D0D3 == 0x03)))
            {
                MPMC = 0x03
                While (PMFS)
                {
                    Sleep (0x0A)
                }
            }
        }

        Method (XHCS, 0, Serialized)
        {
            Local2 = MEMB /* \_SB_.PC00.XHCI.MEMB */
            Local1 = PDBM /* \_SB_.PC00.XHCI.PDBM */
            PDBM &= 0xFFFFFFFFFFFFFFF9
            MEMB = XWMB /* \XWMB */
            PDBM = (Local1 | 0x02)
            OperationRegion (MC11, SystemMemory, XWMB, 0x9000)
            Field (MC11, DWordAcc, Lock, Preserve)
            {
                Offset (0x8090), 
                    ,   10, 
                UCLI,   1
            }

            UCLI = 0x01
            PDBM &= 0xFFFFFFFFFFFFFFFD
            MEMB = Local2
            PDBM = Local1
        }

        Method (CUID, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
            {
                Return (0x01)
            }

            Return (0x00)
        }

        Device (RHUB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS2, 0, Serialized)  // _PS2: Power State 2
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS2X))
                {
                    PS2X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS3X))
                {
                    PS3X ()
                }
            }

            Device (HS01)
            {
                Name (_ADR, 0x01)  // _ADR: Address
            }

            Device (HS02)
            {
                Name (_ADR, 0x02)  // _ADR: Address
            }

            Device (HS03)
            {
                Name (_ADR, 0x03)  // _ADR: Address
            }

            Device (HS04)
            {
                Name (_ADR, 0x04)  // _ADR: Address
            }

            Device (HS05)
            {
                Name (_ADR, 0x05)  // _ADR: Address
            }

            Device (HS06)
            {
                Name (_ADR, 0x06)  // _ADR: Address
            }

            Device (HS07)
            {
                Name (_ADR, 0x07)  // _ADR: Address
            }

            Device (HS08)
            {
                Name (_ADR, 0x08)  // _ADR: Address
            }

            Device (HS09)
            {
                Name (_ADR, 0x09)  // _ADR: Address
            }

            Device (HS10)
            {
                Name (_ADR, 0x0A)  // _ADR: Address
            }

            Device (USR1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((USRA () + 0x00))
                }
            }

            Device (USR2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((USRA () + 0x01))
                }
            }

            Device (SS01)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x00))
                }
            }

            Device (SS02)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x01))
                }
            }

            Device (SS03)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x02))
                }
            }

            Device (SS04)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x03))
                }
            }

            Device (SS05)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x04))
                }
            }

            Device (SS06)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x05))
                }
            }
        }
    }

    Scope (_SB.PC00.XHCI.RHUB)
    {
        Device (HS11)
        {
            Name (_ADR, 0x0B)  // _ADR: Address
        }

        Device (HS12)
        {
            Name (_ADR, 0x0C)  // _ADR: Address
        }

        Device (HS13)
        {
            Name (_ADR, 0x0D)  // _ADR: Address
        }

        Device (HS14)
        {
            Name (_ADR, 0x0E)  // _ADR: Address
        }

        Device (SS07)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return ((SSPA () + 0x06))
            }
        }

        Device (SS08)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return ((SSPA () + 0x07))
            }
        }

        Device (SS09)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return ((SSPA () + 0x08))
            }
        }

        Device (SS10)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return ((SSPA () + 0x09))
            }
        }
    }

    Scope (_SB.PC00)
    {
        Scope (CAVS)
        {
            OperationRegion (HDAR, PCI_Config, 0x00, 0x0100)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x48), 
                    ,   6, 
                MBCG,   1, 
                Offset (0x54), 
                Offset (0x55), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x04))
            }

            Method (GPEH, 0, NotSerialized)
            {
                If ((VDID == 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If ((PMEE && PMES))
                {
                    ADBG ("HDAS GPEH")
                    PMES = 0x01
                    Notify (CAVS, 0x02) // Device Wake
                }
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y22, AddressRangeACPI, TypeStatic)
            })
            Method (AUWA, 0, Serialized)
            {
                If ((PCHS == 0x01))
                {
                    If ((^^LPC0.CRID == 0x00))
                    {
                        Return (0x01)
                    }
                }
                Else
                {
                    If ((^^LPC0.CRID == 0x00))
                    {
                        Return (0x01)
                    }

                    If ((^^LPC0.CRID == 0x01))
                    {
                        Return (0x01)
                    }

                    If ((^^LPC0.CRID == 0x09))
                    {
                        Return (0x01)
                    }
                }

                Return (0x00)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                ADBG ("HDAS _INI")
                CreateQWordField (NBUF, \_SB.PC00.CAVS._Y22._MIN, NBAS)  // _MIN: Minimum Base Address
                CreateQWordField (NBUF, \_SB.PC00.CAVS._Y22._MAX, NMAS)  // _MAX: Maximum Base Address
                CreateQWordField (NBUF, \_SB.PC00.CAVS._Y22._LEN, NLEN)  // _LEN: Length
                NBAS = NHLA /* \NHLA */
                NMAS = (NHLA + (NHLL - 0x01))
                NLEN = NHLL /* \NHLL */
                If ((AUWA () == 0x01))
                {
                    MBCG = 0x00
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("HDAS _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (0x00)
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (0x01)
                        {
                            ADBG ("_DSM Fun 1 NHLT")
                            Return (NBUF) /* \_SB_.PC00.CAVS.NBUF */
                        }
                        Case (0x02)
                        {
                            ADBG ("_DSM Fun 2 FMSK")
                            Return (ADFM) /* \ADFM */
                        }
                        Case (0x03)
                        {
                            ADBG ("_DSM Fun 3 PPMS")
                            Return (Buffer (0x01)
                            {
                                 0x00                                             // .
                            })
                        }
                        Default
                        {
                            ADBG ("_DSM Fun NOK")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }

                ADBG ("_DSM UUID NOK")
                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }
        }

        Scope (RP01)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR1 /* \LTR1 */
                LMSL = PML1 /* \PML1 */
                LNSL = PNL1 /* \PNL1 */
                OBFN = OBF1 /* \OBF1 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP02)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR2 /* \LTR2 */
                LMSL = PML2 /* \PML2 */
                LNSL = PNL2 /* \PNL2 */
                OBFN = OBF2 /* \OBF2 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP03)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR3 /* \LTR3 */
                LMSL = PML3 /* \PML3 */
                LNSL = PNL3 /* \PNL3 */
                OBFN = OBF3 /* \OBF3 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP04)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR4 /* \LTR4 */
                LMSL = PML4 /* \PML4 */
                LNSL = PNL4 /* \PNL4 */
                OBFN = OBF4 /* \OBF4 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP05)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR5 /* \LTR5 */
                LMSL = PML5 /* \PML5 */
                LNSL = PNL5 /* \PNL5 */
                OBFN = OBF5 /* \OBF5 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP06)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR6 /* \LTR6 */
                LMSL = PML6 /* \PML6 */
                LNSL = PNL6 /* \PNL6 */
                OBFN = OBF6 /* \OBF6 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP07)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR7 /* \LTR7 */
                LMSL = PML7 /* \PML7 */
                LNSL = PNL7 /* \PNL7 */
                OBFN = OBF7 /* \OBF7 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP08)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR8 /* \LTR8 */
                LMSL = PML8 /* \PML8 */
                LNSL = PNL8 /* \PNL8 */
                OBFN = OBF8 /* \OBF8 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP09)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR9 /* \LTR9 */
                LMSL = PML9 /* \PML9 */
                LNSL = PNL9 /* \PNL9 */
                OBFN = OBF9 /* \OBF9 */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP10)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTRA /* \LTRA */
                LMSL = PMLA /* \PMLA */
                LNSL = PNLA /* \PNLA */
                OBFN = OBFA /* \OBFA */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP11)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTRB /* \LTRB */
                LMSL = PMLB /* \PMLB */
                LNSL = PNLB /* \PNLB */
                OBFN = OBFB /* \OBFB */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP12)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTRC /* \LTRC */
                LMSL = PMLC /* \PMLC */
                LNSL = PNLC /* \PNLC */
                OBFN = OBFC /* \OBFC */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP13)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTRD /* \LTRD */
                LMSL = PMLD /* \PMLD */
                LNSL = PNLD /* \PNLD */
                OBFN = OBFD /* \OBFD */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP14)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTRE /* \LTRE */
                LMSL = PMLE /* \PMLE */
                LNSL = PNLE /* \PNLE */
                OBFN = OBFE /* \OBFE */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP15)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTRF /* \LTRF */
                LMSL = PMLF /* \PMLF */
                LNSL = PNLF /* \PNLF */
                OBFN = OBFF /* \OBFF */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP16)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTRG /* \LTRG */
                LMSL = PMLG /* \PMLG */
                LNSL = PNLG /* \PNLG */
                OBFN = OBFG /* \OBFG */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP17)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTRH /* \LTRH */
                LMSL = PMLH /* \PMLH */
                LNSL = PNLH /* \PNLH */
                OBFN = OBFH /* \OBFH */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP18)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTRI /* \LTRI */
                LMSL = PMLI /* \PMLI */
                LNSL = PNLI /* \PNLI */
                OBFN = OBFI /* \OBFI */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP19)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTRJ /* \LTRJ */
                LMSL = PMLJ /* \PMLJ */
                LNSL = PNLJ /* \PNLJ */
                OBFN = OBFJ /* \OBFJ */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (RP20)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTRK /* \LTRK */
                LMSL = PMLK /* \PMLK */
                LNSL = PNLK /* \PNLK */
                OBFN = OBFK /* \OBFK */
            }

            OperationRegion (PXCS, PCI_Config, 0x00, 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1, 
                Offset (0x420), 
                    ,   30, 
                DPGE,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Name (LTRV, Package (0x04)
            {
                0x00, 
                0x00, 
                0x00, 
                0x00
            })
            Device (PXSX)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (((VDID != 0xFFFFFFFF) && (PMSX == 0x01)))
                {
                    Notify (PXSX, 0x02) // Device Wake
                    PMSX = 0x01
                    PSPX = 0x01
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }
        }

        Scope (SAT1)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (\_SB.PC00.SAT0.SDSM))
                {
                    Return (^^SAT0.SDSM (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
            }

            Device (PRT6)
            {
                Name (_ADR, 0x0006FFFF)  // _ADR: Address
            }

            Device (PRT7)
            {
                Name (_ADR, 0x0007FFFF)  // _ADR: Address
            }
        }

        Scope (SAT2)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (\_SB.PC00.SAT0.SDSM))
                {
                    Return (^^SAT0.SDSM (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
            }
        }

        Scope (TERM)
        {
            Name (_HID, "INT3536")  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFE03C000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y23)
                {
                    0x00000012,
                }
            })
            CreateDWordField (RBUF, \_SB.PC00.TERM._Y23._INT, IRQN)  // _INT: Interrupts
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                IRQN = TIRQ /* \TIRQ */
                Return (RBUF) /* \_SB_.PC00.TERM.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TAEN == 0x00))
                {
                    Return (0x00)
                }

                If ((TIRQ == 0x00))
                {
                    Return (0x00)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (ITSS, SystemMemory, (SBRG + 0x00C43100), 0x0208)
        Field (ITSS, ByteAcc, NoLock, Preserve)
        {
            PARC,   8, 
            PBRC,   8, 
            PCRC,   8, 
            PDRC,   8, 
            PERC,   8, 
            PFRC,   8, 
            PGRC,   8, 
            PHRC,   8, 
            Offset (0x200), 
                ,   1, 
                ,   1, 
            SCGE,   1
        }
    }

    Method (ADBG, 1, Serialized)
    {
        Return (0x00)
    }

    Scope (_GPE)
    {
        Method (NTFC, 2, NotSerialized)
        {
            If ((Arg0 & 0x01))
            {
                Notify (\_SB.SCK0, Arg1)
            }

            If ((Arg0 & 0x02))
            {
                Notify (\_SB.SCK1, Arg1)
            }
        }

        Method (NTFI, 2, NotSerialized)
        {
            If ((Arg0 & 0x01))
            {
                Notify (\_SB.PC06, Arg1)
                Notify (\_SB.PC07, Arg1)
                Notify (\_SB.PC08, Arg1)
                Notify (\_SB.PC09, Arg1)
                Notify (\_SB.PC10, Arg1)
                Notify (\_SB.PC11, Arg1)
            }
        }

        Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If ((SCI0 == 0x03))
            {
                NTFC (SCI2, 0x03)
                SCI0 = 0x00
            }
            ElseIf ((SCI0 == 0x01))
            {
                NTFC (CPHP, 0x00)
                NTFI (IIOP, 0x00)
                CPHP = 0x00
                IIOP = 0x00
                SCI0 = 0x00
            }

            Method (NNPR, 0, NotSerialized)
            {
                Local0 = Package (0x00){}
                If (CondRefOf (\_SB.NVDR.NTPR))
                {
                    Local0 = \_SB.NVDR.NTPR ()
                }

                Return (Local0)
            }

            Method (NNDO, 1, NotSerialized)
            {
                If (CondRefOf (\_SB.NVDR.NTDO))
                {
                    \_SB.NVDR.NTDO (Arg0)
                }
            }

            Local0 = NNPR ()
            GPEC = 0x00
            If ((WSCI == 0x01))
            {
                WSCI = 0x00
                If ((DBGM == 0x01))
                {
                    IO80 = 0x4A
                }

                If (CondRefOf (\_SB.WERR))
                {
                    Notify (\_SB.WERR, 0x80) // Status Change
                }
            }

            NNDO (Local0)
            If (CondRefOf (\_SB.EDGH))
            {
                \_SB.EDGH ()
            }
        }

        Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Sleep (0xC8)
            IO80 = 0x01
            Sleep (0x0A)
            Local1 = 0x00
            If ((\_SB.PC01.BR1A.PMEP == 0x01))
            {
                Local0 = \_SB.PC01.BR1A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PC01.BR1A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x01
                Notify (\_SB.PC01.BR1A, Local0)
            }

            If ((\_SB.PC01.BR1B.PMEP == 0x01))
            {
                Local0 = \_SB.PC01.BR1B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PC01.BR1B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x02
                Notify (\_SB.PC01.BR1B, Local0)
            }

            If ((\_SB.PC01.BR1C.PMEP == 0x01))
            {
                Local0 = \_SB.PC01.BR1C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PC01.BR1C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x03
                Notify (\_SB.PC01.BR1C, Local0)
            }

            If ((\_SB.PC01.BR1D.PMEP == 0x01))
            {
                Local0 = \_SB.PC01.BR1D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PC01.BR1D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x04
                Notify (\_SB.PC01.BR1D, Local0)
            }

            If ((\_SB.PC02.BR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PC02.BR2A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PC02.BR2A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x05
                Notify (\_SB.PC02.BR2A, Local0)
            }

            If ((\_SB.PC02.BR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PC02.BR2B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PC02.BR2B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x06
                Notify (\_SB.PC02.BR2B, Local0)
            }

            If ((\_SB.PC02.BR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PC02.BR2C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PC02.BR2C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x07
                Notify (\_SB.PC02.BR2C, Local0)
            }

            If ((\_SB.PC02.BR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PC02.BR2D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PC02.BR2D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x08
                Notify (\_SB.PC02.BR2D, Local0)
            }

            If ((\_SB.PC03.BR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PC03.BR3A.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PC03.BR3A.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x09
                Notify (\_SB.PC03.BR3A, Local0)
            }

            If ((\_SB.PC03.BR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PC03.BR3B.PMEH (0x0A)
            }
            Else
            {
                Local0 = \_SB.PC03.BR3B.HPEH (0x0A)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0A
                Notify (\_SB.PC03.BR3B, Local0)
            }

            If ((\_SB.PC03.BR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PC03.BR3C.PMEH (0x0B)
            }
            Else
            {
                Local0 = \_SB.PC03.BR3C.HPEH (0x0B)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0B
                Notify (\_SB.PC03.BR3C, Local0)
            }

            If ((\_SB.PC03.BR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PC03.BR3D.PMEH (0x0C)
            }
            Else
            {
                Local0 = \_SB.PC03.BR3D.HPEH (0x0C)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0C
                Notify (\_SB.PC03.BR3D, Local0)
            }

            If ((\_SB.PC04.BR4A.PMEP == 0x01))
            {
                Local0 = \_SB.PC04.BR4A.PMEH (0x0D)
            }
            Else
            {
                Local0 = \_SB.PC04.BR4A.HPEH (0x0D)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0D
                Notify (\_SB.PC04.BR4A, Local0)
            }

            If ((\_SB.PC04.BR4B.PMEP == 0x01))
            {
                Local0 = \_SB.PC04.BR4B.PMEH (0x0E)
            }
            Else
            {
                Local0 = \_SB.PC04.BR4B.HPEH (0x0E)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0E
                Notify (\_SB.PC04.BR4B, Local0)
            }

            If ((\_SB.PC04.BR4C.PMEP == 0x01))
            {
                Local0 = \_SB.PC04.BR4C.PMEH (0x0F)
            }
            Else
            {
                Local0 = \_SB.PC04.BR4C.HPEH (0x0F)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0F
                Notify (\_SB.PC04.BR4C, Local0)
            }

            If ((\_SB.PC04.BR4D.PMEP == 0x01))
            {
                Local0 = \_SB.PC04.BR4D.PMEH (0x10)
            }
            Else
            {
                Local0 = \_SB.PC04.BR4D.HPEH (0x10)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x10
                Notify (\_SB.PC04.BR4D, Local0)
            }

            If ((\_SB.PC05.BR5A.PMEP == 0x01))
            {
                Local0 = \_SB.PC05.BR5A.PMEH (0x11)
            }
            Else
            {
                Local0 = \_SB.PC05.BR5A.HPEH (0x11)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x11
                Notify (\_SB.PC05.BR5A, Local0)
            }

            If ((\_SB.PC05.BR5B.PMEP == 0x01))
            {
                Local0 = \_SB.PC05.BR5B.PMEH (0x12)
            }
            Else
            {
                Local0 = \_SB.PC05.BR5B.HPEH (0x12)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x12
                Notify (\_SB.PC05.BR5B, Local0)
            }

            If ((\_SB.PC05.BR5C.PMEP == 0x01))
            {
                Local0 = \_SB.PC05.BR5C.PMEH (0x13)
            }
            Else
            {
                Local0 = \_SB.PC05.BR5C.HPEH (0x13)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x13
                Notify (\_SB.PC05.BR5C, Local0)
            }

            If ((\_SB.PC05.BR5D.PMEP == 0x01))
            {
                Local0 = \_SB.PC05.BR5D.PMEH (0x14)
            }
            Else
            {
                Local0 = \_SB.PC05.BR5D.HPEH (0x14)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x14
                Notify (\_SB.PC05.BR5D, Local0)
            }

            If ((\_SB.PC07.QR1A.PMEP == 0x01))
            {
                Local0 = \_SB.PC07.QR1A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PC07.QR1A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x01
                Notify (\_SB.PC07.QR1A, Local0)
            }

            If ((\_SB.PC07.QR1B.PMEP == 0x01))
            {
                Local0 = \_SB.PC07.QR1B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PC07.QR1B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x02
                Notify (\_SB.PC07.QR1B, Local0)
            }

            If ((\_SB.PC07.QR1C.PMEP == 0x01))
            {
                Local0 = \_SB.PC07.QR1C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PC07.QR1C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x03
                Notify (\_SB.PC07.QR1C, Local0)
            }

            If ((\_SB.PC07.QR1D.PMEP == 0x01))
            {
                Local0 = \_SB.PC07.QR1D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PC07.QR1D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x04
                Notify (\_SB.PC07.QR1D, Local0)
            }

            If ((\_SB.PC08.QR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PC08.QR2A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PC08.QR2A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x05
                Notify (\_SB.PC08.QR2A, Local0)
            }

            If ((\_SB.PC08.QR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PC08.QR2B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PC08.QR2B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x06
                Notify (\_SB.PC08.QR2B, Local0)
            }

            If ((\_SB.PC08.QR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PC08.QR2C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PC08.QR2C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x07
                Notify (\_SB.PC08.QR2C, Local0)
            }

            If ((\_SB.PC08.QR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PC08.QR2D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PC08.QR2D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x08
                Notify (\_SB.PC08.QR2D, Local0)
            }

            If ((\_SB.PC09.QR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PC09.QR3A.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PC09.QR3A.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x09
                Notify (\_SB.PC09.QR3A, Local0)
            }

            If ((\_SB.PC09.QR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PC09.QR3B.PMEH (0x0A)
            }
            Else
            {
                Local0 = \_SB.PC09.QR3B.HPEH (0x0A)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0A
                Notify (\_SB.PC09.QR3B, Local0)
            }

            If ((\_SB.PC09.QR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PC09.QR3C.PMEH (0x0B)
            }
            Else
            {
                Local0 = \_SB.PC09.QR3C.HPEH (0x0B)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0B
                Notify (\_SB.PC09.QR3C, Local0)
            }

            If ((\_SB.PC09.QR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PC09.QR3D.PMEH (0x0C)
            }
            Else
            {
                Local0 = \_SB.PC09.QR3D.HPEH (0x0C)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0C
                Notify (\_SB.PC09.QR3D, Local0)
            }

            If ((\_SB.PC10.QR4A.PMEP == 0x01))
            {
                Local0 = \_SB.PC10.QR4A.PMEH (0x0D)
            }
            Else
            {
                Local0 = \_SB.PC10.QR4A.HPEH (0x0D)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0D
                Notify (\_SB.PC10.QR4A, Local0)
            }

            If ((\_SB.PC10.QR4B.PMEP == 0x01))
            {
                Local0 = \_SB.PC10.QR4B.PMEH (0x0E)
            }
            Else
            {
                Local0 = \_SB.PC10.QR4B.HPEH (0x0E)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0E
                Notify (\_SB.PC10.QR4B, Local0)
            }

            If ((\_SB.PC10.QR4C.PMEP == 0x01))
            {
                Local0 = \_SB.PC10.QR4C.PMEH (0x0F)
            }
            Else
            {
                Local0 = \_SB.PC10.QR4C.HPEH (0x0F)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0F
                Notify (\_SB.PC10.QR4C, Local0)
            }

            If ((\_SB.PC10.QR4D.PMEP == 0x01))
            {
                Local0 = \_SB.PC10.QR4D.PMEH (0x10)
            }
            Else
            {
                Local0 = \_SB.PC10.QR4D.HPEH (0x10)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x10
                Notify (\_SB.PC10.QR4D, Local0)
            }

            If ((\_SB.PC11.QR5A.PMEP == 0x01))
            {
                Local0 = \_SB.PC11.QR5A.PMEH (0x11)
            }
            Else
            {
                Local0 = \_SB.PC11.QR5A.HPEH (0x11)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x11
                Notify (\_SB.PC11.QR5A, Local0)
            }

            If ((\_SB.PC11.QR5B.PMEP == 0x01))
            {
                Local0 = \_SB.PC11.QR5B.PMEH (0x12)
            }
            Else
            {
                Local0 = \_SB.PC11.QR5B.HPEH (0x12)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x12
                Notify (\_SB.PC11.QR5B, Local0)
            }

            If ((\_SB.PC11.QR5C.PMEP == 0x01))
            {
                Local0 = \_SB.PC11.QR5C.PMEH (0x13)
            }
            Else
            {
                Local0 = \_SB.PC11.QR5C.HPEH (0x13)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x13
                Notify (\_SB.PC11.QR5C, Local0)
            }

            If ((\_SB.PC11.QR5D.PMEP == 0x01))
            {
                Local0 = \_SB.PC11.QR5D.PMEH (0x14)
            }
            Else
            {
                Local0 = \_SB.PC11.QR5D.HPEH (0x14)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x14
                Notify (\_SB.PC11.QR5D, Local0)
            }

            If ((Local0 != 0x00))
            {
                If ((Local1 == 0x01))
                {
                    \_SB.PC01.BR1A.PMES = 0x01
                    \_SB.PC01.BR1A.PMEP = 0x01
                }

                If ((Local1 == 0x02))
                {
                    \_SB.PC01.BR1B.PMES = 0x01
                    \_SB.PC01.BR1B.PMEP = 0x01
                }

                If ((Local1 == 0x03))
                {
                    \_SB.PC01.BR1C.PMES = 0x01
                    \_SB.PC01.BR1C.PMEP = 0x01
                }

                If ((Local1 == 0x04))
                {
                    \_SB.PC01.BR1D.PMES = 0x01
                    \_SB.PC01.BR1D.PMEP = 0x01
                }

                If ((Local1 == 0x05))
                {
                    \_SB.PC02.BR2A.PMES = 0x01
                    \_SB.PC02.BR2A.PMEP = 0x01
                }

                If ((Local1 == 0x06))
                {
                    \_SB.PC02.BR2B.PMES = 0x01
                    \_SB.PC02.BR2B.PMEP = 0x01
                }

                If ((Local1 == 0x07))
                {
                    \_SB.PC02.BR2C.PMES = 0x01
                    \_SB.PC02.BR2C.PMEP = 0x01
                }

                If ((Local1 == 0x08))
                {
                    \_SB.PC02.BR2D.PMES = 0x01
                    \_SB.PC02.BR2D.PMEP = 0x01
                }

                If ((Local1 == 0x09))
                {
                    \_SB.PC03.BR3A.PMES = 0x01
                    \_SB.PC03.BR3A.PMEP = 0x01
                }

                If ((Local1 == 0x0A))
                {
                    \_SB.PC03.BR3B.PMES = 0x01
                    \_SB.PC03.BR3B.PMEP = 0x01
                }

                If ((Local1 == 0x0B))
                {
                    \_SB.PC03.BR3C.PMES = 0x01
                    \_SB.PC03.BR3C.PMEP = 0x01
                }

                If ((Local1 == 0x0C))
                {
                    \_SB.PC03.BR3D.PMES = 0x01
                    \_SB.PC03.BR3D.PMEP = 0x01
                }

                If ((Local1 == 0x0D))
                {
                    \_SB.PC04.BR4A.PMES = 0x01
                    \_SB.PC04.BR4A.PMEP = 0x01
                }

                If ((Local1 == 0x0E))
                {
                    \_SB.PC04.BR4B.PMES = 0x01
                    \_SB.PC04.BR4B.PMEP = 0x01
                }

                If ((Local1 == 0x0F))
                {
                    \_SB.PC04.BR4C.PMES = 0x01
                    \_SB.PC04.BR4C.PMEP = 0x01
                }

                If ((Local1 == 0x10))
                {
                    \_SB.PC04.BR4D.PMES = 0x01
                    \_SB.PC04.BR4D.PMEP = 0x01
                }

                If ((Local1 == 0x11))
                {
                    \_SB.PC05.BR5A.PMES = 0x01
                    \_SB.PC05.BR5A.PMEP = 0x01
                }

                If ((Local1 == 0x12))
                {
                    \_SB.PC05.BR5B.PMES = 0x01
                    \_SB.PC05.BR5B.PMEP = 0x01
                }

                If ((Local1 == 0x13))
                {
                    \_SB.PC05.BR5C.PMES = 0x01
                    \_SB.PC05.BR5C.PMEP = 0x01
                }

                If ((Local1 == 0x14))
                {
                    \_SB.PC05.BR5D.PMES = 0x01
                    \_SB.PC05.BR5D.PMEP = 0x01
                }

                If ((Local1 == 0x01))
                {
                    \_SB.PC07.QR1A.PMES = 0x01
                    \_SB.PC07.QR1A.PMEP = 0x01
                }

                If ((Local1 == 0x02))
                {
                    \_SB.PC07.QR1B.PMES = 0x01
                    \_SB.PC07.QR1B.PMEP = 0x01
                }

                If ((Local1 == 0x03))
                {
                    \_SB.PC07.QR1C.PMES = 0x01
                    \_SB.PC07.QR1C.PMEP = 0x01
                }

                If ((Local1 == 0x04))
                {
                    \_SB.PC07.QR1D.PMES = 0x01
                    \_SB.PC07.QR1D.PMEP = 0x01
                }

                If ((Local1 == 0x05))
                {
                    \_SB.PC08.QR2A.PMES = 0x01
                    \_SB.PC08.QR2A.PMEP = 0x01
                }

                If ((Local1 == 0x06))
                {
                    \_SB.PC08.QR2B.PMES = 0x01
                    \_SB.PC08.QR2B.PMEP = 0x01
                }

                If ((Local1 == 0x07))
                {
                    \_SB.PC08.QR2C.PMES = 0x01
                    \_SB.PC08.QR2C.PMEP = 0x01
                }

                If ((Local1 == 0x08))
                {
                    \_SB.PC08.QR2D.PMES = 0x01
                    \_SB.PC08.QR2D.PMEP = 0x01
                }

                If ((Local1 == 0x09))
                {
                    \_SB.PC09.QR3A.PMES = 0x01
                    \_SB.PC09.QR3A.PMEP = 0x01
                }

                If ((Local1 == 0x0A))
                {
                    \_SB.PC09.QR3B.PMES = 0x01
                    \_SB.PC09.QR3B.PMEP = 0x01
                }

                If ((Local1 == 0x0B))
                {
                    \_SB.PC09.QR3C.PMES = 0x01
                    \_SB.PC09.QR3C.PMEP = 0x01
                }

                If ((Local1 == 0x0C))
                {
                    \_SB.PC09.QR3D.PMES = 0x01
                    \_SB.PC09.QR3D.PMEP = 0x01
                }

                If ((Local1 == 0x0D))
                {
                    \_SB.PC10.QR4A.PMES = 0x01
                    \_SB.PC10.QR4A.PMEP = 0x01
                }

                If ((Local1 == 0x0E))
                {
                    \_SB.PC10.QR4B.PMES = 0x01
                    \_SB.PC10.QR4B.PMEP = 0x01
                }

                If ((Local1 == 0x0F))
                {
                    \_SB.PC10.QR4C.PMES = 0x01
                    \_SB.PC10.QR4C.PMEP = 0x01
                }

                If ((Local1 == 0x10))
                {
                    \_SB.PC10.QR4D.PMES = 0x01
                    \_SB.PC10.QR4D.PMEP = 0x01
                }

                If ((Local1 == 0x11))
                {
                    \_SB.PC11.QR5A.PMES = 0x01
                    \_SB.PC11.QR5A.PMEP = 0x01
                }

                If ((Local1 == 0x12))
                {
                    \_SB.PC11.QR5B.PMES = 0x01
                    \_SB.PC11.QR5B.PMEP = 0x01
                }

                If ((Local1 == 0x13))
                {
                    \_SB.PC11.QR5C.PMES = 0x01
                    \_SB.PC11.QR5C.PMEP = 0x01
                }

                If ((Local1 == 0x14))
                {
                    \_SB.PC11.QR5D.PMES = 0x01
                    \_SB.PC11.QR5D.PMEP = 0x01
                }

                PEES = 0x01
                PMEE = 0x00
            }
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If ((\_SB.PC00.RP01.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP01.HPME ()
                Notify (\_SB.PC00.RP01, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP02.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP02.HPME ()
                Notify (\_SB.PC00.RP02, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP03.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP03.HPME ()
                Notify (\_SB.PC00.RP03, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP04.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP04.HPME ()
                Notify (\_SB.PC00.RP04, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP05.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP05.HPME ()
                Notify (\_SB.PC00.RP05, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP06.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP06.HPME ()
                Notify (\_SB.PC00.RP06, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP07.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP07.HPME ()
                Notify (\_SB.PC00.RP07, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP08.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP08.HPME ()
                Notify (\_SB.PC00.RP08, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP09.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP09.HPME ()
                Notify (\_SB.PC00.RP09, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP10.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP10.HPME ()
                Notify (\_SB.PC00.RP10, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP11.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP11.HPME ()
                Notify (\_SB.PC00.RP11, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP12.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP12.HPME ()
                Notify (\_SB.PC00.RP12, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP13.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP13.HPME ()
                Notify (\_SB.PC00.RP13, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP14.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP14.HPME ()
                Notify (\_SB.PC00.RP14, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP15.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP15.HPME ()
                Notify (\_SB.PC00.RP15, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP16.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP16.HPME ()
                Notify (\_SB.PC00.RP16, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP17.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP17.HPME ()
                Notify (\_SB.PC00.RP17, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP18.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP18.HPME ()
                Notify (\_SB.PC00.RP18, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP19.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP19.HPME ()
                Notify (\_SB.PC00.RP19, 0x02) // Device Wake
            }

            If ((\_SB.PC00.RP20.VDID != 0xFFFFFFFF))
            {
                \_SB.PC00.RP20.HPME ()
                Notify (\_SB.PC00.RP20, 0x02) // Device Wake
            }

            Notify (\_SB.PC01.BR1A, 0x02) // Device Wake
            Notify (\_SB.PC01.BR1B, 0x02) // Device Wake
            Notify (\_SB.PC01.BR1C, 0x02) // Device Wake
            Notify (\_SB.PC01.BR1D, 0x02) // Device Wake
            Notify (\_SB.PC02.BR2A, 0x02) // Device Wake
            Notify (\_SB.PC02.BR2B, 0x02) // Device Wake
            Notify (\_SB.PC02.BR2C, 0x02) // Device Wake
            Notify (\_SB.PC02.BR2D, 0x02) // Device Wake
            Notify (\_SB.PC03.BR3A, 0x02) // Device Wake
            Notify (\_SB.PC03.BR3B, 0x02) // Device Wake
            Notify (\_SB.PC03.BR3C, 0x02) // Device Wake
            Notify (\_SB.PC03.BR3D, 0x02) // Device Wake
            Notify (\_SB.PC04.BR4A, 0x02) // Device Wake
            Notify (\_SB.PC04.BR4B, 0x02) // Device Wake
            Notify (\_SB.PC04.BR4C, 0x02) // Device Wake
            Notify (\_SB.PC04.BR4D, 0x02) // Device Wake
            Notify (\_SB.PC05.BR5A, 0x02) // Device Wake
            Notify (\_SB.PC05.BR5B, 0x02) // Device Wake
            Notify (\_SB.PC05.BR5C, 0x02) // Device Wake
            Notify (\_SB.PC05.BR5D, 0x02) // Device Wake
            Notify (\_SB.PC07.QR1A, 0x02) // Device Wake
            Notify (\_SB.PC07.QR1B, 0x02) // Device Wake
            Notify (\_SB.PC07.QR1C, 0x02) // Device Wake
            Notify (\_SB.PC07.QR1D, 0x02) // Device Wake
            Notify (\_SB.PC08.QR2A, 0x02) // Device Wake
            Notify (\_SB.PC08.QR2B, 0x02) // Device Wake
            Notify (\_SB.PC08.QR2C, 0x02) // Device Wake
            Notify (\_SB.PC08.QR2D, 0x02) // Device Wake
            Notify (\_SB.PC09.QR3A, 0x02) // Device Wake
            Notify (\_SB.PC09.QR3B, 0x02) // Device Wake
            Notify (\_SB.PC09.QR3C, 0x02) // Device Wake
            Notify (\_SB.PC09.QR3D, 0x02) // Device Wake
            Notify (\_SB.PC10.QR4A, 0x02) // Device Wake
            Notify (\_SB.PC10.QR4B, 0x02) // Device Wake
            Notify (\_SB.PC10.QR4C, 0x02) // Device Wake
            Notify (\_SB.PC10.QR4D, 0x02) // Device Wake
            Notify (\_SB.PC11.QR5A, 0x02) // Device Wake
            Notify (\_SB.PC11.QR5B, 0x02) // Device Wake
            Notify (\_SB.PC11.QR5C, 0x02) // Device Wake
            Notify (\_SB.PC11.QR5D, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Method (EDNM, 0, NotSerialized)
        {
            Local0 = ^PC01._SEG ()
            Local1 = ^PC01._BBN ()
            Local2 = ^PC01.BR1A._ADR /* \_SB_.PC01.BR1A._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC01.BR1A, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC01.BR1A, 0x00) // Bus Check
                }
            }

            Local0 = ^PC01._SEG ()
            Local1 = ^PC01._BBN ()
            Local2 = ^PC01.BR1B._ADR /* \_SB_.PC01.BR1B._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC01.BR1B, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC01.BR1B, 0x00) // Bus Check
                }
            }

            Local0 = ^PC01._SEG ()
            Local1 = ^PC01._BBN ()
            Local2 = ^PC01.BR1C._ADR /* \_SB_.PC01.BR1C._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC01.BR1C, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC01.BR1C, 0x00) // Bus Check
                }
            }

            Local0 = ^PC01._SEG ()
            Local1 = ^PC01._BBN ()
            Local2 = ^PC01.BR1D._ADR /* \_SB_.PC01.BR1D._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC01.BR1D, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC01.BR1D, 0x00) // Bus Check
                }
            }

            Local0 = ^PC02._SEG ()
            Local1 = ^PC02._BBN ()
            Local2 = ^PC02.BR2A._ADR /* \_SB_.PC02.BR2A._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC02.BR2A, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC02.BR2A, 0x00) // Bus Check
                }
            }

            Local0 = ^PC02._SEG ()
            Local1 = ^PC02._BBN ()
            Local2 = ^PC02.BR2B._ADR /* \_SB_.PC02.BR2B._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC02.BR2B, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC02.BR2B, 0x00) // Bus Check
                }
            }

            Local0 = ^PC02._SEG ()
            Local1 = ^PC02._BBN ()
            Local2 = ^PC02.BR2C._ADR /* \_SB_.PC02.BR2C._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC02.BR2C, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC02.BR2C, 0x00) // Bus Check
                }
            }

            Local0 = ^PC02._SEG ()
            Local1 = ^PC02._BBN ()
            Local2 = ^PC02.BR2D._ADR /* \_SB_.PC02.BR2D._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC02.BR2D, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC02.BR2D, 0x00) // Bus Check
                }
            }

            Local0 = ^PC03._SEG ()
            Local1 = ^PC03._BBN ()
            Local2 = ^PC03.BR3A._ADR /* \_SB_.PC03.BR3A._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC03.BR3A, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC03.BR3A, 0x00) // Bus Check
                }
            }

            Local0 = ^PC03._SEG ()
            Local1 = ^PC03._BBN ()
            Local2 = ^PC03.BR3B._ADR /* \_SB_.PC03.BR3B._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC03.BR3B, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC03.BR3B, 0x00) // Bus Check
                }
            }

            Local0 = ^PC03._SEG ()
            Local1 = ^PC03._BBN ()
            Local2 = ^PC03.BR3C._ADR /* \_SB_.PC03.BR3C._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC03.BR3C, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC03.BR3C, 0x00) // Bus Check
                }
            }

            Local0 = ^PC03._SEG ()
            Local1 = ^PC03._BBN ()
            Local2 = ^PC03.BR3D._ADR /* \_SB_.PC03.BR3D._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC03.BR3D, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC03.BR3D, 0x00) // Bus Check
                }
            }

            Local0 = ^PC04._SEG ()
            Local1 = ^PC04._BBN ()
            Local2 = ^PC04.BR4A._ADR /* \_SB_.PC04.BR4A._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC04.BR4A, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC04.BR4A, 0x00) // Bus Check
                }
            }

            Local0 = ^PC04._SEG ()
            Local1 = ^PC04._BBN ()
            Local2 = ^PC04.BR4B._ADR /* \_SB_.PC04.BR4B._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC04.BR4B, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC04.BR4B, 0x00) // Bus Check
                }
            }

            Local0 = ^PC04._SEG ()
            Local1 = ^PC04._BBN ()
            Local2 = ^PC04.BR4C._ADR /* \_SB_.PC04.BR4C._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC04.BR4C, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC04.BR4C, 0x00) // Bus Check
                }
            }

            Local0 = ^PC04._SEG ()
            Local1 = ^PC04._BBN ()
            Local2 = ^PC04.BR4D._ADR /* \_SB_.PC04.BR4D._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC04.BR4D, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC04.BR4D, 0x00) // Bus Check
                }
            }

            Local0 = ^PC05._SEG ()
            Local1 = ^PC05._BBN ()
            Local2 = ^PC05.BR5A._ADR /* \_SB_.PC05.BR5A._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC05.BR5A, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC05.BR5A, 0x00) // Bus Check
                }
            }

            Local0 = ^PC05._SEG ()
            Local1 = ^PC05._BBN ()
            Local2 = ^PC05.BR5B._ADR /* \_SB_.PC05.BR5B._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC05.BR5B, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC05.BR5B, 0x00) // Bus Check
                }
            }

            Local0 = ^PC05._SEG ()
            Local1 = ^PC05._BBN ()
            Local2 = ^PC05.BR5C._ADR /* \_SB_.PC05.BR5C._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC05.BR5C, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC05.BR5C, 0x00) // Bus Check
                }
            }

            Local0 = ^PC05._SEG ()
            Local1 = ^PC05._BBN ()
            Local2 = ^PC05.BR5D._ADR /* \_SB_.PC05.BR5D._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC05.BR5D, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC05.BR5D, 0x00) // Bus Check
                }
            }

            Local0 = ^PC07._SEG ()
            Local1 = ^PC07._BBN ()
            Local2 = ^PC07.QR1A._ADR /* \_SB_.PC07.QR1A._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC07.QR1A, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC07.QR1A, 0x00) // Bus Check
                }
            }

            Local0 = ^PC07._SEG ()
            Local1 = ^PC07._BBN ()
            Local2 = ^PC07.QR1B._ADR /* \_SB_.PC07.QR1B._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC07.QR1B, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC07.QR1B, 0x00) // Bus Check
                }
            }

            Local0 = ^PC07._SEG ()
            Local1 = ^PC07._BBN ()
            Local2 = ^PC07.QR1C._ADR /* \_SB_.PC07.QR1C._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC07.QR1C, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC07.QR1C, 0x00) // Bus Check
                }
            }

            Local0 = ^PC07._SEG ()
            Local1 = ^PC07._BBN ()
            Local2 = ^PC07.QR1D._ADR /* \_SB_.PC07.QR1D._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC07.QR1D, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC07.QR1D, 0x00) // Bus Check
                }
            }

            Local0 = ^PC08._SEG ()
            Local1 = ^PC08._BBN ()
            Local2 = ^PC08.QR2A._ADR /* \_SB_.PC08.QR2A._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC08.QR2A, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC08.QR2A, 0x00) // Bus Check
                }
            }

            Local0 = ^PC08._SEG ()
            Local1 = ^PC08._BBN ()
            Local2 = ^PC08.QR2B._ADR /* \_SB_.PC08.QR2B._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC08.QR2B, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC08.QR2B, 0x00) // Bus Check
                }
            }

            Local0 = ^PC08._SEG ()
            Local1 = ^PC08._BBN ()
            Local2 = ^PC08.QR2C._ADR /* \_SB_.PC08.QR2C._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC08.QR2C, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC08.QR2C, 0x00) // Bus Check
                }
            }

            Local0 = ^PC08._SEG ()
            Local1 = ^PC08._BBN ()
            Local2 = ^PC08.QR2D._ADR /* \_SB_.PC08.QR2D._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC08.QR2D, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC08.QR2D, 0x00) // Bus Check
                }
            }

            Local0 = ^PC09._SEG ()
            Local1 = ^PC09._BBN ()
            Local2 = ^PC09.QR3A._ADR /* \_SB_.PC09.QR3A._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC09.QR3A, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC09.QR3A, 0x00) // Bus Check
                }
            }

            Local0 = ^PC09._SEG ()
            Local1 = ^PC09._BBN ()
            Local2 = ^PC09.QR3B._ADR /* \_SB_.PC09.QR3B._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC09.QR3B, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC09.QR3B, 0x00) // Bus Check
                }
            }

            Local0 = ^PC09._SEG ()
            Local1 = ^PC09._BBN ()
            Local2 = ^PC09.QR3C._ADR /* \_SB_.PC09.QR3C._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC09.QR3C, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC09.QR3C, 0x00) // Bus Check
                }
            }

            Local0 = ^PC09._SEG ()
            Local1 = ^PC09._BBN ()
            Local2 = ^PC09.QR3D._ADR /* \_SB_.PC09.QR3D._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC09.QR3D, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC09.QR3D, 0x00) // Bus Check
                }
            }

            Local0 = ^PC10._SEG ()
            Local1 = ^PC10._BBN ()
            Local2 = ^PC10.QR4A._ADR /* \_SB_.PC10.QR4A._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC10.QR4A, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC10.QR4A, 0x00) // Bus Check
                }
            }

            Local0 = ^PC10._SEG ()
            Local1 = ^PC10._BBN ()
            Local2 = ^PC10.QR4B._ADR /* \_SB_.PC10.QR4B._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC10.QR4B, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC10.QR4B, 0x00) // Bus Check
                }
            }

            Local0 = ^PC10._SEG ()
            Local1 = ^PC10._BBN ()
            Local2 = ^PC10.QR4C._ADR /* \_SB_.PC10.QR4C._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC10.QR4C, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC10.QR4C, 0x00) // Bus Check
                }
            }

            Local0 = ^PC10._SEG ()
            Local1 = ^PC10._BBN ()
            Local2 = ^PC10.QR4D._ADR /* \_SB_.PC10.QR4D._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC10.QR4D, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC10.QR4D, 0x00) // Bus Check
                }
            }

            Local0 = ^PC11._SEG ()
            Local1 = ^PC11._BBN ()
            Local2 = ^PC11.QR5A._ADR /* \_SB_.PC11.QR5A._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC11.QR5A, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC11.QR5A, 0x00) // Bus Check
                }
            }

            Local0 = ^PC11._SEG ()
            Local1 = ^PC11._BBN ()
            Local2 = ^PC11.QR5B._ADR /* \_SB_.PC11.QR5B._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC11.QR5B, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC11.QR5B, 0x00) // Bus Check
                }
            }

            Local0 = ^PC11._SEG ()
            Local1 = ^PC11._BBN ()
            Local2 = ^PC11.QR5C._ADR /* \_SB_.PC11.QR5C._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC11.QR5C, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC11.QR5C, 0x00) // Bus Check
                }
            }

            Local0 = ^PC11._SEG ()
            Local1 = ^PC11._BBN ()
            Local2 = ^PC11.QR5D._ADR /* \_SB_.PC11.QR5D._ADR */
            Local3 = (Local2 & 0xFFFF)
            Local4 = (Local2 >> 0x10)
            If (EDTM (Local0, Local1, Local4, Local3))
            {
                If (EDNT)
                {
                    EDVD = 0x02
                    Notify (^PC11.QR5D, 0x0F) // Reserved
                }
                Else
                {
                    EDVD = 0x02
                    Notify (^PC11.QR5D, 0x00) // Bus Check
                }
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == 0x00))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == 0x00))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, 0x01)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y24)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y25)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y26)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y27)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y28)
            {
                0x00000000,
            }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == 0x01))
            {
                CreateDWordField (CRST, \_SB.TPM._Y24._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y24._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = TPBS /* \TPBS */
                CreateDWordField (CRST, \_SB.TPM._Y25._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y25._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = TPCS /* \TPCS */
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTPT == 0x01))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y26._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y26._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == 0x01))
                {
                    If (((TMRQ == 0x00) || (TMRQ == 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y27._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y27._LEN, LTFD)  // _LEN: Length
                        MTFD = 0xFED40000
                        LTFD = 0x5000
                        Return (CRID) /* \_SB_.TPM_.CRID */
                    }
                    Else
                    {
                        CreateDWordField (CREI, \_SB.TPM._Y28._INT, LIRQ)  // _INT: Interrupts
                        LIRQ = TMRQ /* \_SB_.TPM_.TMRQ */
                        Return (CREI) /* \_SB_.TPM_.CREI */
                    }
                }
                ElseIf ((TTPF == 0x00))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y25._BAS, MTFF)  // _BAS: Base Address
                    MTFF = FTPM /* \FTPM */
                    Return (CRST) /* \_SB_.TPM_.CRST */
                }

                MTFE = 0x00
                LTFE = 0x00
                Return (CRID) /* \_SB_.TPM_.CRID */
            }

            Return (CRID) /* \_SB_.TPM_.CRID */
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (((TMRQ != 0x00) && (TMRQ != 0xFFFFFFFF)))
            {
                CreateDWordField (Arg0, 0x11, IRQ0)
                CreateDWordField (CREI, \_SB.TPM._Y28._INT, LIRQ)  // _INT: Interrupts
                LIRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                TMRQ = IRQ0 /* \_SB_.TPM_._SRS.IRQ0 */
                CreateBitField (Arg0, 0x79, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y28._HE, LTRG)  // _HE_: High-Edge
                LTRG = ITRG /* \_SB_.TPM_._SRS.ITRG */
                CreateBitField (Arg0, 0x7A, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y28._LL, LLVL)  // _LL_: Low Level
                LLVL = ILVL /* \_SB_.TPM_._SRS.ILVL */
                If ((((IDTF & 0x0F) == 0x00) || ((IDTF & 0x0F
                    ) == 0x0F)))
                {
                    If ((IRQ0 < 0x10))
                    {
                        INTV = (IRQ0 & 0x0F)
                    }

                    If ((ITRG == 0x01))
                    {
                        INTE |= 0x10
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFEF
                    }

                    If ((ILVL == 0x00))
                    {
                        INTE |= 0x08
                    }
                    Else
                    {
                        INTE &= 0xFFFFFFF7
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == 0x00))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }
            ElseIf ((TTDP == 0x01))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Return (0x00)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, 0x00)
            If ((ToInteger (Arg0) != 0x00)){}
            Switch (ToInteger (Arg1))
            {
                Case (0x00)
                {
                    Return (Buffer (0x01)
                    {
                         0x03                                             // .
                    })
                }
                Case (0x01)
                {
                    TIMR = 0x00
                    If ((AMDT == 0x01))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (0x01)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & 0x01)
                        ) == 0x03))
                    {
                        HCMD = 0x01
                    }
                    Else
                    {
                        FERR = 0x01
                        BEGN = 0x00
                    }

                    Return (Zero)
                }

            }

            Return (0x01)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != 0x01)){}
            Switch (ToInteger (Arg1))
            {
                Case (0x00)
                {
                    Return (Buffer (0x01)
                    {
                         0x03                                             // .
                    })
                }
                Case (0x01)
                {
                    Name (TPMV, Package (0x02)
                    {
                        0x01, 
                        Package (0x02)
                        {
                            0x01, 
                            0x20
                        }
                    })
                    If ((_STA () == 0x00))
                    {
                        Return (Package (0x01)
                        {
                            0x00
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, 0x02)
        Field (TSMI, WordAcc, NoLock, Preserve)
        {
            SMI,    16
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (0x01)
                    {
                        If ((PPIV == 0x00))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [0x00])
                        SRSP = 0x00
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            0x00, 
                            0x00
                        })
                        PPI1 [0x01] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            0x00, 
                            0x00, 
                            0x00
                        })
                        SRSP = 0x00
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [0x01] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [0x00])
                        FLAG = 0x07
                        OPTN = 0x00
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [0x01]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [0x00])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        RQST = DerefOf (Arg3 [0x00])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = 0x00
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, NotSerialized)
        {
        }
    }

    Scope (_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, _Y29)
                {15}
        })
        CreateWordField (BUFA, \_SB._Y29._INT, IRA0)  // _INT: Interrupts
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PARC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PARC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PARC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PARC = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PBRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PBRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PBRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PBRC = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PCRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PCRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PCRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PCRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PDRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PDRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PDRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PDRC = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PERC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PERC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PERC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PERC = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PFRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PFRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PFRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PFRC = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PGRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PGRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PGRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PGRC = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PHRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PHRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PHRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PHRC = Local0
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, 0x00)
        Name (XNPT, 0x01)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x01)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x01)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == 0xFFFFFFFF))
            {
                Return (0x00)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (0x01)
                }

                Return (0x00)
            }
        }
    }
}

